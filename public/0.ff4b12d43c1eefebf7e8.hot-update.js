webpackHotUpdate(0,{

/***/ 39:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return PortDisplay; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_moment__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_moment__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_moment_locale_en_gb__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_moment_locale_en_gb___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_moment_locale_en_gb__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util__ = __webpack_require__(1);\n/*\n    port.js\n*/\n\n/* global d3 : false\n */\n\n\n\n\n\nvar PortDisplay =\n/*#__PURE__*/\nfunction () {\n  function PortDisplay(portData, topMargin, rightMargin) {\n    this.portDataDefault = portData;\n    this._topMargin = topMargin;\n    this._rightMargin = rightMargin; // Shroud Cay\n\n    this.currentPort = {\n      id: \"366\",\n      coord: {\n        x: 4396,\n        y: 2494\n      }\n    };\n    this.fontSizes = {\n      initial: 30,\n      portLabel: 18,\n      pbZone: 7\n    };\n    this._zoomLevel = \"initial\";\n    this._showPBZones = \"all\";\n    this._highlightId = null;\n    this._highlightDuration = 200;\n    this._iconSize = 50;\n    this._circleSizes = {\n      initial: 50,\n      portLabel: 20,\n      pbZone: 5\n    };\n    this._showRadiusType = \"attack\";\n    this._taxIncomeRadius = d3.scaleLinear();\n    this._netIncomeRadius = d3.scaleLinear();\n    this._attackRadius = d3.scaleLinear().domain([0, 1]);\n    this._colourScale = d3.scaleLinear().domain([0, 1]).range([\"#fbf8f5\", \"#a62e39\"]);\n    this._minRadiusFactor = 1;\n    this._maxRadiusFactor = 6;\n    this.setPortData(portData);\n\n    this._setupListener();\n\n    this._setupSvg();\n\n    this._setupSummary();\n\n    this._setupFlags();\n  }\n\n  var _proto = PortDisplay.prototype;\n\n  _proto._setupListener = function _setupListener() {\n    var _this = this;\n\n    $(\"#radius-type\").change(function () {\n      _this._showRadiusType = $(\"input[name='showRadiusType']:checked\").val();\n\n      _this.update();\n    });\n  };\n\n  _proto._setupSvg = function _setupSvg() {\n    this._g = d3.select(\"#na-svg\").append(\"g\").classed(\"ports\", true);\n    this._gPortCircle = this._g.append(\"g\").classed(\"port\", true);\n    this._gIcon = this._g.append(\"g\");\n    this._gText = this._g.append(\"g\");\n  };\n\n  _proto._setupSummary = function _setupSummary() {\n    // Main box\n    var svgPortSummary = d3.select(\"body\").append(\"svg\").attr(\"id\", \"summary\").classed(\"summary\", true).style(\"position\", \"absolute\").style(\"top\", this._topMargin + \"px\").style(\"right\", this._rightMargin + \"px\"); // Background\n\n    var portSummaryRect = svgPortSummary.insert(\"rect\").attr(\"x\", 0).attr(\"y\", 0); // Number of selected ports\n\n    this._portSummaryTextNumPorts = svgPortSummary.append(\"text\");\n    var portSummaryTextNumPortsDes = svgPortSummary.append(\"text\").classed(\"des\", true).text(\"selected ports\"); // Total tax income\n\n    this._portSummaryTextTaxIncome = svgPortSummary.append(\"text\");\n    var portSummaryTextTaxIncomeDes = svgPortSummary.append(\"text\").classed(\"des\", true).text(\"tax income\"); // Total net income\n\n    this._portSummaryTextNetIncome = svgPortSummary.append(\"text\");\n    var portSummaryTextNetIncomeDes = svgPortSummary.append(\"text\").classed(\"des\", true).text(\"net income\");\n    var bboxNumPortsDes = portSummaryTextNumPortsDes.node().getBoundingClientRect(),\n        bboxTaxIncomeDes = portSummaryTextTaxIncomeDes.node().getBoundingClientRect(),\n        bboxNetIncomeDes = portSummaryTextNetIncomeDes.node().getBoundingClientRect(),\n        lineHeight = parseInt(window.getComputedStyle(document.getElementById(\"na-svg\")).getPropertyValue(\"line-height\"), 10);\n    var height = lineHeight * 3,\n        width = bboxNumPortsDes.width + bboxTaxIncomeDes.width * 3 + bboxNetIncomeDes.width,\n        firstLine = \"35%\",\n        secondLine = \"60%\",\n        firstBlock = Math.round(width / 10),\n        secondBlock = Math.round(firstBlock + bboxNumPortsDes.width + firstBlock),\n        thirdBlock = Math.round(secondBlock + bboxTaxIncomeDes.width + firstBlock);\n    svgPortSummary.attr(\"height\", height).attr(\"width\", width); // Background\n\n    portSummaryRect.attr(\"height\", height).attr(\"width\", width); // Number of selected ports\n\n    this._portSummaryTextNumPorts.attr(\"x\", firstBlock).attr(\"y\", firstLine);\n\n    portSummaryTextNumPortsDes.attr(\"x\", firstBlock).attr(\"y\", secondLine); // Total tax income\n\n    this._portSummaryTextTaxIncome.attr(\"x\", secondBlock).attr(\"y\", firstLine);\n\n    portSummaryTextTaxIncomeDes.attr(\"x\", secondBlock).attr(\"y\", secondLine); // Total net income\n\n    this._portSummaryTextNetIncome.attr(\"x\", thirdBlock).attr(\"y\", firstLine);\n\n    portSummaryTextNetIncomeDes.attr(\"x\", thirdBlock).attr(\"y\", secondLine);\n  };\n\n  _proto._setupFlags = function _setupFlags() {\n    var _this2 = this;\n\n    var svgDef = d3.select(\"#na-svg defs\");\n    __WEBPACK_IMPORTED_MODULE_2__common__[\"e\" /* nations */].map(function (d) {\n      return d.short;\n    }).forEach(function (nation) {\n      svgDef.append(\"pattern\").attr(\"id\", nation).attr(\"width\", \"100%\").attr(\"height\", \"100%\").attr(\"viewBox\", \"0 0 \" + _this2._iconSize + \" \" + _this2._iconSize).append(\"image\").attr(\"height\", _this2._iconSize).attr(\"width\", _this2._iconSize).attr(\"href\", \"icons/\" + nation + \".svg\");\n      svgDef.append(\"pattern\").attr(\"id\", nation + \"a\").attr(\"width\", \"100%\").attr(\"height\", \"100%\").attr(\"viewBox\", \"0 0 \" + _this2._iconSize + \" \" + _this2._iconSize).append(\"image\").attr(\"height\", _this2._iconSize).attr(\"width\", _this2._iconSize).attr(\"href\", \"icons/\" + nation + \"a.svg\");\n    });\n  };\n\n  _proto._updateIcons = function _updateIcons() {\n    var _this3 = this;\n\n    function showDetails(d, i, nodes) {\n      function getText(portProperties) {\n        var port = {\n          name: portProperties.name,\n          icon: portProperties.availableForAll ? portProperties.nation + \"a\" : portProperties.nation,\n          availableForAll: portProperties.availableForAll,\n          depth: portProperties.shallow ? \"Shallow\" : \"Deep\",\n          countyCapital: portProperties.countyCapital ? \" (county capital)\" : \"\",\n          nonCapturable: portProperties.nonCapturable,\n          captured: portProperties.capturer ? \" captured by \" + portProperties.capturer + \" \" + __WEBPACK_IMPORTED_MODULE_0_moment___default.a.utc(portProperties.lastPortBattle).fromNow() : \"\",\n          lastPortBattle: portProperties.lastPortBattle,\n          // eslint-disable-next-line no-nested-ternary\n          attack: !portProperties.attackerNation.length ? \"\" : portProperties.attackerClan + \" (\" + portProperties.attackerNation + \") attacks\" + (portProperties.portBattle.length ? \" at \" + __WEBPACK_IMPORTED_MODULE_0_moment___default.a.utc(portProperties.portBattle).format(\"HH.MM\") + \" (\" + __WEBPACK_IMPORTED_MODULE_0_moment___default.a.utc(portProperties.portBattle).fromNow() + \")\" : \": \" + Object(__WEBPACK_IMPORTED_MODULE_3__util__[\"g\" /* formatPercent */])(portProperties.attackHostility) + \" hostility\"),\n          // eslint-disable-next-line no-nested-ternary\n          pbTimeRange: portProperties.nonCapturable ? \"\" : !portProperties.portBattleStartTime ? \"11.00\\u202F\\u2013\\u202F8.00\" : (portProperties.portBattleStartTime + 10) % 24 + \".00\\u202F\\u2013\\u202F\" + (portProperties.portBattleStartTime + 13) % 24 + \".00\",\n          brLimit: Object(__WEBPACK_IMPORTED_MODULE_3__util__[\"f\" /* formatInt */])(portProperties.brLimit),\n          conquestMarksPension: portProperties.conquestMarksPension,\n          taxIncome: Object(__WEBPACK_IMPORTED_MODULE_3__util__[\"h\" /* formatSiInt */])(portProperties.taxIncome),\n          portTax: Object(__WEBPACK_IMPORTED_MODULE_3__util__[\"g\" /* formatPercent */])(portProperties.portTax),\n          netIncome: Object(__WEBPACK_IMPORTED_MODULE_3__util__[\"h\" /* formatSiInt */])(portProperties.netIncome),\n          tradingCompany: portProperties.tradingCompany ? \", trading company level\\u202F\" + portProperties.tradingCompany : \"\",\n          laborHoursDiscount: portProperties.laborHoursDiscount ? \", labor hours discount\" : \"\",\n          producesTrading: portProperties.producesTrading.join(\", \"),\n          dropsTrading: portProperties.dropsTrading.join(\", \"),\n          producesNonTrading: portProperties.producesNonTrading.join(\", \"),\n          dropsNonTrading: portProperties.dropsNonTrading.join(\", \"),\n          consumesTrading: portProperties.consumesTrading.map(function (good) {\n            return good.name + (good.amount > 1 ? \" (\" + good.amount + \")\" : \"\");\n          }).join(\", \"),\n          consumesNonTrading: portProperties.consumesNonTrading.map(function (good) {\n            return good.name;\n          }).join(\", \")\n        };\n\n        switch (portProperties.portBattleType) {\n          case \"Large\":\n            port.pbType = \"1<sup>st</sup>\";\n            break;\n\n          case \"Medium\":\n            port.pbType = \"4<sup>th</sup>\";\n            break;\n\n          default:\n            port.pbType = \"6<sup>th</sup>\";\n            break;\n        }\n\n        return port;\n      }\n\n      function tooltipData(portProperties) {\n        var port = getText(portProperties);\n        var h = \"<table><tbody<tr><td><i class=\\\"flag-icon \" + port.icon + \"\\\"></i></td>\";\n        h += \"<td><span class=\\\"port-name\\\">\" + port.name + \"</span>\";\n        h += port.availableForAll ? \" (accessible to all nations)\" : \"\";\n        h += \"</td></tr></tbody></table>\";\n\n        if (port.attack.length) {\n          h += \"<div class=\\\"alert alert-danger mt-2\\\" role=\\\"alert\\\">\" + port.attack + \"</div>\";\n        }\n\n        h += \"<p>\" + port.depth + \" water port \" + port.countyCapital + port.captured + \"<br>\";\n\n        if (!port.nonCapturable) {\n          h += \"Port battle \" + port.pbTimeRange + \", \" + port.brLimit + \" BR, \";\n          h += port.pbType + \"\\u202Frate AI, \";\n          h += port.conquestMarksPension + \"\\u202Fconquest point\";\n          h += port.conquestMarksPension > 1 ? \"s\" : \"\";\n          h += \"<br>Tax income \" + port.taxIncome + \" (\" + port.portTax + \"), net income \" + port.netIncome;\n          h += port.tradingCompany;\n          h += port.laborHoursDiscount;\n        } else {\n          h += \"Not capturable\";\n          h += \"<br>\" + port.portTax + \" tax\";\n        }\n\n        h += \"</p>\";\n        h += \"<table class='table table-sm'>\";\n\n        if (port.producesTrading.length || port.producesNonTrading.length) {\n          h += \"<tr><td>Produces</td><td>\";\n\n          if (port.producesNonTrading.length) {\n            h += \"<span class=\\\"non-trading\\\">\" + port.producesNonTrading + \"</span>\";\n\n            if (port.producesTrading.length) {\n              h += \"<br>\";\n            }\n          }\n\n          if (port.producesTrading.length) {\n            h += \"\" + port.producesTrading;\n          }\n\n          h += \"</td></tr>\";\n        }\n\n        if (port.dropsTrading.length || port.dropsNonTrading.length) {\n          h += \"<tr><td>Drops</td><td>\";\n\n          if (port.dropsNonTrading.length) {\n            h += \"<span class=\\\"non-trading\\\">\" + port.dropsNonTrading + \"</span>\";\n\n            if (port.dropsTrading.length) {\n              h += \"<br>\";\n            }\n          }\n\n          if (port.dropsTrading.length) {\n            h += \"\" + port.dropsTrading;\n          }\n\n          h += \"</td></tr>\";\n        }\n\n        if (port.consumesTrading.length || port.consumesNonTrading.length) {\n          h += \"<tr><td>Consumes</td><td>\";\n\n          if (port.consumesNonTrading.length) {\n            h += \"<span class=\\\"non-trading\\\">\" + port.consumesNonTrading + \"</span>\";\n\n            if (port.consumesTrading.length) {\n              h += \"<br>\";\n            }\n          }\n\n          if (port.consumesTrading.length) {\n            h += \"\" + port.consumesTrading;\n          }\n\n          h += \"</td></tr>\";\n        }\n\n        h += \"</table>\";\n        return h;\n      }\n\n      var port = d3.select(nodes[i]);\n      port.attr(\"data-toggle\", \"tooltip\"); // eslint-disable-next-line no-underscore-dangle\n\n      $(port._groups[0]).tooltip({\n        delay: {\n          show: this._highlightDuration,\n          hide: this._highlightDuration\n        },\n        html: true,\n        placement: \"auto\",\n        title: tooltipData(d.properties),\n        trigger: \"manual\"\n      }).tooltip(\"show\");\n    }\n\n    function hideDetails(d, i, nodes) {\n      // eslint-disable-next-line no-underscore-dangle\n      $(d3.select(nodes[i])._groups[0]).tooltip(\"hide\");\n    }\n\n    var circleSize = this._circleSizes[this._zoomLevel]; // Data join\n\n    var circleUpdate = this._gIcon.selectAll(\"circle\").data(this.portData, function (d) {\n      return d.id;\n    }); // Remove old circles\n\n\n    circleUpdate.exit().remove(); // Update kept circles\n    // circleUpdate; // not needed\n    // Add new circles\n\n    var circleEnter = circleUpdate.enter().append(\"circle\").attr(\"fill\", function (d) {\n      return \"url(#\" + (d.properties.availableForAll ? d.properties.nation + \"a\" : d.properties.nation) + \")\";\n    }).attr(\"cx\", function (d) {\n      return d.geometry.coordinates[0];\n    }).attr(\"cy\", function (d) {\n      return d.geometry.coordinates[1];\n    }).on(\"click\", showDetails).on(\"mouseout\", hideDetails); // Apply to both old and new\n\n    circleUpdate.merge(circleEnter).attr(\"r\", function (d) {\n      return d.id === _this3._highlightId ? circleSize * 2 : circleSize;\n    });\n  };\n\n  _proto._updatePortCircles = function _updatePortCircles() {\n    var _this4 = this;\n\n    var rMin = this._circleSizes[this._zoomLevel] * this._minRadiusFactor,\n        rMax = this._circleSizes[this._zoomLevel] * this._maxRadiusFactor;\n    var data = {};\n\n    if (this._showRadiusType === \"taxIncome\" || this._showRadiusType === \"netIncome\") {\n      data = this.portData.filter(function (d) {\n        return !d.properties.nonCapturable;\n      });\n    } else if (this._showRadiusType === \"attack\") {\n      data = this.portData.filter(function (d) {\n        return d.properties.attackerNation.length;\n      });\n    } // Data join\n\n\n    var circleUpdate = this._gPortCircle.selectAll(\"circle\").data(data, function (d) {\n      return d.id;\n    }); // Remove old circles\n\n\n    circleUpdate.exit().remove(); // Update kept circles\n    // circleUpdate; // not needed\n    // Add new circles\n\n    var circleEnter = circleUpdate.enter().append(\"circle\").attr(\"cx\", function (d) {\n      return d.geometry.coordinates[0];\n    }).attr(\"cy\", function (d) {\n      return d.geometry.coordinates[1];\n    }); // Apply to both old and new\n\n    var circleMerge = circleUpdate.merge(circleEnter);\n\n    if (this._showRadiusType === \"taxIncome\") {\n      var minTaxIncome = d3.min(data, function (d) {\n        return d.properties.taxIncome;\n      }),\n          maxTaxIncome = d3.max(data, function (d) {\n        return d.properties.taxIncome;\n      });\n\n      this._taxIncomeRadius.domain([minTaxIncome, maxTaxIncome]);\n\n      this._taxIncomeRadius.range([rMin, rMax]);\n\n      circleMerge.attr(\"class\", \"bubble pos\").attr(\"r\", function (d) {\n        return _this4._taxIncomeRadius(Math.abs(d.properties.taxIncome));\n      });\n    } else if (this._showRadiusType === \"netIncome\") {\n      var minNetIncome = d3.min(data, function (d) {\n        return d.properties.netIncome;\n      }),\n          maxNetIncome = d3.max(data, function (d) {\n        return d.properties.netIncome;\n      });\n\n      this._netIncomeRadius.domain([minNetIncome, maxNetIncome]).range([rMin, rMax]);\n\n      circleMerge.attr(\"class\", function (d) {\n        return d.properties.netIncome < 0 ? \"bubble neg\" : \"bubble pos\";\n      }).attr(\"r\", function (d) {\n        return _this4._netIncomeRadius(Math.abs(d.properties.netIncome));\n      });\n    } else if (this._showRadiusType === \"attack\") {\n      this._attackRadius.range([rMin, rMax]);\n\n      circleMerge.attr(\"class\", \"bubble\").attr(\"fill\", function (d) {\n        return _this4._colourScale(d.properties.attackHostility);\n      }).attr(\"r\", function (d) {\n        return _this4._attackRadius(d.properties.attackHostility);\n      });\n    }\n  };\n\n  _proto.updateTexts = function updateTexts() {\n    var _this5 = this;\n\n    if (this._zoomLevel === \"initial\") {\n      this._gText.attr(\"display\", \"none\");\n    } else {\n      this._gText.attr(\"display\", \"inherit\");\n\n      var circleSize = this._circleSizes[this._zoomLevel],\n          fontSize = this.fontSizes[this._zoomLevel]; // Data join\n\n      var textUpdate = this._gText.selectAll(\"text\").data(this.portData, function (d) {\n        return d.id;\n      }); // Remove old text\n\n\n      textUpdate.exit().remove(); // Update kept texts\n      // textUpdate; // not needed\n      // Add new texts\n\n      var textEnter = textUpdate.enter().append(\"text\").text(function (d) {\n        return d.properties.name;\n      });\n      var deltaY = circleSize + fontSize;\n      var deltaY2 = circleSize * 2 + fontSize * 2; // Apply to both old and new\n\n      textUpdate.merge(textEnter).attr(\"x\", function (d) {\n        return _this5._zoomLevel === \"pbZone\" && (_this5._showPBZones === \"all\" || _this5._showPBZones === \"single\" && d.id === _this5.currentPort.id) ? d.geometry.coordinates[0] + d.properties.dx : d.geometry.coordinates[0];\n      }).attr(\"y\", function (d) {\n        if (_this5._zoomLevel !== \"pbZone\") {\n          return d.id === _this5._highlightId ? d.geometry.coordinates[1] + deltaY2 : d.geometry.coordinates[1] + deltaY;\n        }\n\n        return _this5._showPBZones === \"all\" || _this5._showPBZones === \"single\" && d.id === _this5.currentPort.id ? d.geometry.coordinates[1] + d.properties.dy : d.geometry.coordinates[1] + deltaY;\n      }).attr(\"font-size\", function (d) {\n        return d.id === _this5._highlightId ? fontSize * 2 + \"px\" : fontSize + \"px\";\n      }).attr(\"text-anchor\", function (d) {\n        if (_this5._zoomLevel === \"pbZone\" && (_this5._showPBZones === \"all\" || _this5._showPBZones === \"single\" && d.id === _this5.currentPort.id)) {\n          return d.properties.dx < 0 ? \"end\" : \"start\";\n        }\n\n        return \"middle\";\n      });\n    }\n  };\n\n  _proto._updateSummary = function _updateSummary() {\n    var numberPorts = Object.keys(this.portData).length;\n    var taxTotal = 0,\n        netTotal = 0;\n\n    if (numberPorts) {\n      taxTotal = this.portData.map(function (d) {\n        return d.properties.taxIncome;\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n      netTotal = this.portData.map(function (d) {\n        return d.properties.netIncome;\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n    }\n\n    this._portSummaryTextNumPorts.text(\"\" + numberPorts);\n\n    this._portSummaryTextTaxIncome.text(\"\" + Object(__WEBPACK_IMPORTED_MODULE_3__util__[\"h\" /* formatSiInt */])(taxTotal));\n\n    this._portSummaryTextNetIncome.text(\"\" + Object(__WEBPACK_IMPORTED_MODULE_3__util__[\"h\" /* formatSiInt */])(netTotal));\n  };\n\n  _proto.update = function update() {\n    this._updateIcons();\n\n    this._updatePortCircles();\n\n    this.updateTexts();\n\n    this._updateSummary();\n  };\n\n  _proto.setHighlightId = function setHighlightId(highlightId) {\n    this._highlightId = highlightId;\n  };\n\n  _proto.setPortData = function setPortData(portData) {\n    this.portData = portData;\n  };\n\n  _proto.setCurrentPort = function setCurrentPort(id, x, y) {\n    this.currentPort = {\n      id: id,\n      coord: {\n        x: x,\n        y: y\n      }\n    };\n  };\n\n  _proto.setZoomLevel = function setZoomLevel(zoomLevel) {\n    this._zoomLevel = zoomLevel;\n  };\n\n  _proto.transform = function transform(_transform) {\n    this._g.attr(\"transform\", _transform);\n  };\n\n  _proto.clearMap = function clearMap() {\n    this.portData = this.portDataDefault;\n    this.update();\n  };\n\n  return PortDisplay;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n");

/***/ })

})
webpackHotUpdate(0,{

/***/ 133:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {/* harmony export (immutable) */ __webpack_exports__[\"a\"] = naDisplay;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_geo__ = __webpack_require__(134);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_queue__ = __webpack_require__(178);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_d3_request__ = __webpack_require__(181);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_d3_selection__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_d3_voronoi__ = __webpack_require__(229);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_d3_zoom__ = __webpack_require__(234);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_d3fc_label_layout__ = __webpack_require__(289);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_d3fc_label_layout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_d3fc_label_layout__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_topojson_client__ = __webpack_require__(334);\nfunction naDisplay(a){function b(){var a,b,c;m=w.geoPath().projection(l),j=document.getElementById(\"na\").offsetWidth-{top:0,right:0,bottom:0,left:0}.left-{top:0,right:0,bottom:0,left:0}.right,j=4000>j?4000:j,a=m.bounds(u),b=a[1][0]-a[0][0],c=a[1][1]-a[0][1],k=j/(b/c)-{top:0,right:0,bottom:0,left:0}.top-{top:0,right:0,bottom:0,left:0}.bottom,l=w.geoEquirectangular().fitExtent([[-b,-c],[j+b,k+c]],u),m=w.geoPath().projection(l)}function c(){n=w.select(\"#na\").append(\"svg\").attr(\"id\",\"na-svg\").attr(\"width\",j).attr(\"height\",k).on(\"click\",e,!0),n.append(\"rect\").attr(\"class\",\"background\").attr(\"width\",j).attr(\"height\",k),p=w.zoom().scaleExtent([0.6,3]).on(\"zoom\",d),n.call(p),o=n.append(\"defs\")}function d(){r.attr(\"transform\",transform),q.attr(\"transform\",transform),s.attr(\"transform\",transform),q.selectAll(\".label text\").style(\"font-size\",function(){return\"naFontSize / transform.k\"}),q.selectAll(\".label circle\").attr(\"r\",10/transform.k)}function e(){__WEBPACK_IMPORTED_MODULE_3_d3_selection__[\"event\"].defaultPrevented&&__WEBPACK_IMPORTED_MODULE_3_d3_selection__[\"event\"].stopPropagation()}function f(){var a=o.append(\"filter\").attr(\"id\",\"border\");a.append(\"feColorMatrix\").attr(\"in\",\"SourceGraphic\").attr(\"type\",\"matrix\").attr(\"values\",\"0 0 0 0 0.302  0 0 0 0 0.263  0 0 0 0 0.216  0 0 0 1 0\").attr(\"result\",\"fmask\"),a.append(\"feGaussianBlur\").attr(\"in\",\"fmask\").attr(\"stdDeviation\",15).attr(\"result\",\"f1blur\"),a.append(\"feColorMatrix\").attr(\"in\",\"SourceGraphic\").attr(\"type\",\"matrix\").attr(\"values\",\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0   0 0 0 1 0\").attr(\"result\",\"f2mask1\"),a.append(\"feMorphology\").attr(\"in\",\"f2mask1\").attr(\"radius\",1).attr(\"operator\",\"erode\").attr(\"result\",\"f2m\"),a.append(\"feGaussianBlur\").attr(\"in\",\"f2m\").attr(\"stdDeviation\",5).attr(\"result\",\"f2blur\"),a.append(\"feColorMatrix\").attr(\"in\",\"f2blur\").attr(\"type\",\"matrix\").attr(\"values\",\"1 0 0 0 0.302 0 1 0 0 0.263 0 0 1 0 0.216 0 0 0 -1 1\").attr(\"result\",\"f2mask2\"),a.append(\"feComposite\").attr(\"operator\",\"in\").attr(\"in\",\"f2mask2\").attr(\"in2\",\"f2mask1\").attr(\"result\",\"f2border\");var b=a.append(\"feMerge\");b.append(\"feMergeNode\").attr(\"in\",\"f1blur\"),b.append(\"feMergeNode\").attr(\"in\",\"SourceGraphic\"),b.append(\"feMergeNode\").attr(\"in\",\"f2border\"),r=n.append(\"g\"),r.append(\"path\").attr(\"class\",\"na-country\").datum(u).attr(\"d\",m).style(\"filter\",\"url(#border)\")}function g(){[\"DE\",\"DK\",\"ES\",\"FR\",\"FT\",\"GB\",\"NL\",\"NT\",\"PL\",\"PR\",\"RU\",\"SE\",\"US\"].forEach(function(a){o.append(\"pattern\").attr(\"id\",a).attr(\"x\",\"0%\").attr(\"y\",\"0%\").attr(\"width\",\"100%\").attr(\"height\",\"100%\").attr(\"viewBox\",\"0 0 50 50\").append(\"image\").attr(\"x\",\"0\").attr(\"y\",\"0\").attr(\"height\",\"50\").attr(\"width\",\"50\").attr(\"xlink:href\",\"icons/\"+a+\".svg\")});var a=x.layoutTextLabel().padding(3).value(function(a){return a.properties.name}),b=x.layoutGreedy(),c=x.layoutLabel(b).size(function(a,b,c){var d=w.select(c[b]).select(\"text\").node().getBBox();return[d.width,d.height]}).position(function(a){return l(a.geometry.coordinates)}).component(a);q=n.append(\"g\").datum(v.features).call(c),q.selectAll(\".label text\").attr(\"dx\",10).attr(\"class\",function(a){var b;return b=a.properties.shallow||a.properties.countyCapital?\"na-port-out\":\"na-port-in\",b}),q.selectAll(\".label rect\").attr(\"class\",\"label-rect\"),q.selectAll(\".label circle\").attr(\"id\",function(a){return\"p\"+a.properties.id}).attr(\"r\",10).attr(\"fill\",function(a){return\"url(#\"+a.properties.nation+\")\"}).on(\"mouseover\",function(a){w.select(this).attr(\"data-toggle\",\"tooltip\").attr(\"title\",function(a){return h(a.properties)}),$(\"#p\"+a.properties.id).tooltip({delay:{show:100,hide:100},html:!0,placement:\"auto\"}).tooltip(\"show\")}).on(\"mouseout\",function(a){$(\"#p\"+a.properties.id).tooltip(\"hide\")})}function h(a){var b;return b=\"<table><tbody<tr><td><i class='flag-icon \"+a.nation+\"'></i></td>\",b+=\"<td class='port-name'>\"+a.name+\"</td></tr></tbody></table>\",b+=\"<p>\"+(a.shallow?\"Shallow\":\"Deep\"),b+=\" water port\",a.countyCapital&&(b+=\", county capital\"),b+=a.nonCapturable?\", not capturable\":\", \"+a.brLimit+\" BR limit\",a.capturer&&(b+=\", owned by \"+a.capturer),b+=\"</p>\",b+=\"<table class='table table-sm'>\",a.produces.length&&(b+=\"<tr><td>Produces</td><td>\"+a.produces.join(\", \")+\"</td></tr>\"),a.drops.length&&(b+=\"<tr><td>Drops</td><td>\"+a.drops.join(\", \")+\"</tr>\"),a.consumes.length&&(b+=\"<tr><td>Consumes</td><td>\"+a.consumes.join(\", \")+\"</tr>\"),b+=\"</table>\",b}function i(){var a=v.features.filter(function(a){return!a.properties.shallow&&!a.properties.countyCapital}).map(function(a){return[a.geometry.coordinates[0],a.geometry.coordinates[1]]});s=n.append(\"g\").attr(\"class\",\"voronoi\").call(p).selectAll(\".voronoi\").data(a).enter().append(\"g\");var b=j/10,c=w.voronoi().extent([[-1,-1],[j+1,k+1]]),d=c(a.map(l));s.append(\"path\").data(c.polygons(a.map(l))).attr(\"d\",function(a){return a?\"M\"+a.join(\"L\")+\"Z\":null}).attr(\"pointer-events\",\"visibleFill\").on(\"mouseover\",function(){var a=Object(__WEBPACK_IMPORTED_MODULE_3_d3_selection__[\"mouse\"])(this),c=a[0],e=a[1],f=d.find(c,e,b);t=s._groups[0][f.index],t.classList.add(\"highlight-voronoi\")}).on(\"mouseout\",function(){t.classList.remove(\"highlight-voronoi\")})}var j,k,l,m,n,o,p,q,r,s,t,u,v,w={geoEquirectangular:__WEBPACK_IMPORTED_MODULE_0_d3_geo__[\"a\" /* geoEquirectangular */],geoPath:__WEBPACK_IMPORTED_MODULE_0_d3_geo__[\"b\" /* geoPath */],json:__WEBPACK_IMPORTED_MODULE_2_d3_request__[\"a\" /* json */],queue:__WEBPACK_IMPORTED_MODULE_1_d3_queue__[\"a\" /* queue */],request:__WEBPACK_IMPORTED_MODULE_2_d3_request__[\"b\" /* request */],select:__WEBPACK_IMPORTED_MODULE_3_d3_selection__[\"select\"],voronoi:__WEBPACK_IMPORTED_MODULE_4_d3_voronoi__[\"a\" /* voronoi */],zoom:__WEBPACK_IMPORTED_MODULE_5_d3_zoom__[\"a\" /* zoom */]},x={layoutTextLabel:__WEBPACK_IMPORTED_MODULE_6_d3fc_label_layout__[\"layoutTextLabel\"],layoutGreedy:__WEBPACK_IMPORTED_MODULE_6_d3fc_label_layout__[\"layoutGreedy\"],layoutLabel:__WEBPACK_IMPORTED_MODULE_6_d3fc_label_layout__[\"layoutLabel\"]},y={feature:__WEBPACK_IMPORTED_MODULE_7_topojson_client__[\"a\" /* feature */]},z=parseInt(window.getComputedStyle(document.getElementById(\"na\")).fontSize);w.queue().defer(w.json,a+\".json\").await(function(a,d){if(a)throw a;u=y.feature(d,d.objects.countries),v=y.feature(d,d.objects.ports),b(),c(),i(),f(),g()})}\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(14)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///133\n");

/***/ })

})
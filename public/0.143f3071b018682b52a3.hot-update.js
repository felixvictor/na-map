webpackHotUpdate(0,{

/***/ 13:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {/* harmony export (immutable) */ __webpack_exports__[\"a\"] = naDisplay;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_topojson_client__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_moment__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_moment__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment_locale_en_gb__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment_locale_en_gb___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_moment_locale_en_gb__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_knob__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_knob___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jquery_knob__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_bootstrap_js_dist_tooltip__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_bootstrap_js_dist_tooltip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_bootstrap_js_dist_tooltip__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_bootstrap_js_dist_util__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_bootstrap_js_dist_util___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_bootstrap_js_dist_util__);\n/*\n Draws teleport map for Naval Action\n\n iB 2017\n */\n\n\n\n\n\n\nfunction naDisplay(serverName) {\n  var naSvg, naCanvas, naContext, svgDef, naZoom;\n  var mainGPort, mainGPBZone, mainGVoronoi, mainGCoord, gCompass, naVoronoiDiagram, pathVoronoi, naTeleportPorts, gPorts;\n  var defaults = {\n    margin: {\n      top: parseInt($(\".navbar\").css(\"height\")),\n      right: 20,\n      bottom: 20,\n      left: 20\n    },\n    coord: {\n      min: 0,\n      max: 8192\n    },\n    maxScale: 10,\n    fontSize: 16,\n    circleSize: 10,\n    iconSize: 50,\n    PBZoneZoomScale: 1.5,\n    labelZoomScale: 0.5,\n    highlightDuration: 200,\n    mapJson: serverName + \".json\",\n    pbJson: \"pb.json\",\n    imageSrc: \"images/na-map.jpg\",\n    image: new Image(),\n    line: d3.line(),\n    transformMatrix: {\n      A: -0.00499866779363828,\n      B: -0.00000021464254980645,\n      C: 4096.88635151897,\n      D: 4096.90282787469\n    },\n    transformMatrixInv: {\n      A: -200.053302087577,\n      B: -0.00859027897636011,\n      C: 819630.836437126,\n      D: -819563.745651571\n    },\n    compassDirections: [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\"]\n  };\n  defaults.width = top.innerWidth - defaults.margin.left - defaults.margin.right;\n  defaults.height = top.innerHeight - defaults.margin.top - defaults.margin.bottom;\n  defaults.minScale = Math.min(defaults.width / defaults.coord.max, defaults.height / defaults.coord.max);\n  var initial = {\n    scale: defaults.minScale,\n    x: -defaults.coord.max / 2 * defaults.minScale,\n    y: -defaults.coord.max / 2 * defaults.minScale\n  };\n  initial.transform = d3.zoomIdentity.translate(initial.x, initial.y).scale(initial.scale);\n  defaults.xScale = d3.scaleLinear().clamp(true).range([0, defaults.width]);\n  defaults.yScale = d3.scaleLinear().clamp(true).range([0, defaults.height]);\n  defaults.coord.voronoi = [[defaults.coord.min - 1, defaults.coord.min - 1], [defaults.coord.max + 1, defaults.coord.max + 1]]; // limit how far away the mouse can be from finding a voronoi site\n\n  defaults.voronoiRadius = Math.min(defaults.height, defaults.width);\n  var current = {\n    transform: {\n      x: initial.x,\n      y: initial.y,\n      scale: initial.scale\n    },\n    fontSize: defaults.fontSize,\n    circleSize: defaults.circleSize,\n    highlightId: null,\n    bPBZoneDisplayed: false,\n    bPortLabelDisplayed: true,\n    bFirstCoord: true,\n    radioButton: \"compass\",\n    lineData: []\n  };\n\n  var thousandsWithBlanks = function thousandsWithBlanks(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"\\u2009\");\n  };\n\n  var formatCoord = function formatCoord(x) {\n    var r = thousandsWithBlanks(Math.abs(Math.trunc(x)));\n\n    if (x < 0) {\n      r = \"\\u2212\\u2009\" + r;\n    }\n\n    return r;\n  }; // https://stackoverflow.com/questions/7490660/converting-wind-direction-in-angles-to-text-words\n\n\n  function degreesToCompass(degrees) {\n    var val = Math.floor(degrees / 22.5 + 0.5);\n    return defaults.compassDirections[val % 16];\n  }\n\n  function naDisplayCountries(transform) {\n    function drawImage() {\n      naContext.drawImage(defaults.image, 0, 0);\n      naContext.getImageData(0, 0, defaults.width, defaults.height);\n    }\n\n    naContext.save();\n    naContext.clearRect(0, 0, defaults.width, defaults.height);\n    naContext.translate(transform.x, transform.y);\n    naContext.scale(transform.k, transform.k);\n    drawImage();\n    naContext.restore();\n  }\n\n  function doubleClickAction() {\n    function printCoord(x, y) {\n      // svg coord to F11 coord\n      function convertInvCoordX(x, y) {\n        return defaults.transformMatrixInv.A * x + defaults.transformMatrixInv.B * y + defaults.transformMatrixInv.C;\n      } // svg coord to F11 coord\n\n\n      function convertInvCoordY(x, y) {\n        return defaults.transformMatrixInv.B * x - defaults.transformMatrixInv.A * y + defaults.transformMatrixInv.D;\n      }\n\n      var F11X = convertInvCoordX(x, y) * -1,\n          F11Y = convertInvCoordY(x, y) * -1;\n\n      if (current.radioButton === \"F11\") {\n        printF11Coord(x, y, F11X, F11Y);\n      } else {\n        plotCourse(x, y);\n      }\n    }\n\n    var coord = d3.mouse(this),\n        transform = d3.zoomTransform(this);\n    var mx = coord[0],\n        my = coord[1],\n        tk = transform.k,\n        tx = transform.x,\n        ty = transform.y;\n    var x = (mx - tx) / tk,\n        y = (my - ty) / tk;\n\n    if (current.radioButton === \"F11\") {\n      printCoord(x, y);\n    } else {\n      plotCourse(x, y);\n    }\n\n    zoomAndPan(d3.zoomIdentity.translate(-x, -y).scale(1));\n  }\n\n  function plotCourse(x, y, style) {\n    if (style === void 0) {\n      style = \"course\";\n    }\n\n    function printCompass(x, y, style) {\n      var compassSize = \"course\" === style ? 100 : 30;\n      mainGCoord.append(\"image\").attr(\"class\", \"compass\").attr(\"x\", x).attr(\"y\", y).attr(\"transform\", \"translate(\" + -compassSize / 2 + \",\" + -compassSize / 2 + \")\").attr(\"height\", compassSize).attr(\"width\", compassSize).attr(\"xlink:href\", \"icons/compass.svg\");\n      gCompass = mainGCoord.append(\"path\");\n    }\n\n    function printLine(x, y) {\n      // https://stackoverflow.com/questions/9970281/java-calculating-the-angle-between-two-points-in-degrees\n      function rotationAngleInDegrees(centerPt, targetPt) {\n        // Converts from radians to degrees\n        // http://cwestblog.com/2012/11/12/javascript-degree-and-radian-conversion/\n        Math.radiansToDegrees = function (radians) {\n          return radians * 180 / Math.PI;\n        };\n\n        var theta = Math.atan2(targetPt[1] - centerPt[1], targetPt[0] - centerPt[0]);\n        theta -= Math.PI / 2.0;\n        var angle = Math.radiansToDegrees(theta);\n\n        if (angle < 0) {\n          angle += 360;\n        }\n\n        return angle;\n      }\n\n      var degrees = rotationAngleInDegrees(current.lineData[current.lineData.length - 1], current.lineData[current.lineData.length - 2]);\n      var compass = degreesToCompass(degrees);\n      gCompass.datum(current.lineData).attr(\"d\", defaults.line);\n      var svg = mainGCoord.append(\"svg\").attr(\"x\", x).attr(\"y\", y);\n      var rect = svg.append(\"rect\");\n      var text = svg.append(\"text\").attr(\"x\", \"50%\").attr(\"y\", \"50%\").text(compass + \" (\" + Math.round(degrees) + \"\\xB0)\");\n      var bbox = text.node().getBBox();\n      var height = bbox.height + defaults.fontSize,\n          width = bbox.width + defaults.fontSize;\n      rect.attr(\"x\", 0).attr(\"y\", 0).attr(\"height\", height).attr(\"width\", width);\n      svg.attr(\"height\", height).attr(\"width\", width);\n    }\n\n    current.lineData.push([x, y]);\n\n    if (current.bFirstCoord) {\n      printCompass(x, y, style);\n      current.bFirstCoord = !current.bFirstCoord;\n    } else {\n      printLine(x, y);\n    }\n  }\n\n  function goToF11(F11X, F11Y) {\n    // F11 coord to svg coord\n    function convertCoordX(x, y) {\n      return defaults.transformMatrix.A * x + defaults.transformMatrix.B * y + defaults.transformMatrix.C;\n    } // F11 coord to svg coord\n\n\n    function convertCoordY(x, y) {\n      return defaults.transformMatrix.B * x - defaults.transformMatrix.A * y + defaults.transformMatrix.D;\n    }\n\n    F11X *= -1;\n    F11Y *= -1;\n    var x = convertCoordX(F11X, F11Y),\n        y = convertCoordY(F11X, F11Y);\n    clearMap();\n\n    if (current.radioButton === \"F11\") {\n      printF11Coord(x, y, F11X, F11Y);\n    } else {\n      plotCourse(x, y);\n    }\n\n    zoomAndPan(d3.zoomIdentity.translate(-x, -y).scale(1));\n  }\n\n  function printF11Coord(x, y, textX, textY) {\n    var g = mainGCoord.append(\"g\").attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n    g.append(\"circle\").attr(\"r\", 20);\n    g.append(\"text\").attr(\"dx\", \"-1.5em\").attr(\"dy\", \"-.5em\").text(formatCoord(textX));\n    g.append(\"text\").attr(\"dx\", \"-1.5em\").attr(\"dy\", \".5em\").text(formatCoord(textY));\n  }\n\n  function naZoomed() {\n    function configureMap(scale) {\n      function naTogglePBZones() {\n        mainGPBZone.style(\"display\", mainGPBZone.active ? \"none\" : \"inherit\");\n        mainGPBZone.active = !mainGPBZone.active;\n      }\n\n      if (defaults.PBZoneZoomScale < scale) {\n        if (!current.bPBZoneDisplayed) {\n          naTogglePBZones();\n          naToggleDisplayTeleportAreas();\n          current.highlightId = null;\n          current.bPBZoneDisplayed = true;\n        }\n      } else {\n        if (current.bPBZoneDisplayed) {\n          naTogglePBZones();\n          naToggleDisplayTeleportAreas();\n          current.bPBZoneDisplayed = false;\n        }\n      }\n\n      if (defaults.labelZoomScale > scale) {\n        if (current.bPortLabelDisplayed) {\n          current.bPortLabelDisplayed = false;\n        }\n      } else {\n        if (!current.bPortLabelDisplayed) {\n          current.bPortLabelDisplayed = true;\n        }\n      }\n\n      updatePorts();\n    }\n\n    var transform = d3.event.transform; //console.log(`transform: ${JSON.stringify(transform)}`);\n\n    configureMap(transform.k);\n    naDisplayCountries(transform);\n    mainGPort.attr(\"transform\", transform);\n    mainGVoronoi.attr(\"transform\", transform);\n    mainGPBZone.attr(\"transform\", transform);\n    mainGCoord.attr(\"transform\", transform);\n    current.circleSize = defaults.circleSize / transform.k;\n    mainGPort.selectAll(\"circle\").attr(\"r\", current.circleSize);\n    mainGPort.selectAll(\"text\").attr(\"dx\", function (d) {\n      return d.properties.dx / transform.k;\n    });\n    mainGPort.selectAll(\"text\").attr(\"dy\", function (d) {\n      return d.properties.dy / transform.k;\n    });\n\n    if (current.bPortLabelDisplayed) {\n      current.fontSize = defaults.fontSize / transform.k;\n      mainGPort.selectAll(\"text\").style(\"font-size\", current.fontSize);\n\n      if (current.highlightId && !current.bPBZoneDisplayed) {\n        naVoronoiHighlight();\n      }\n    }\n  }\n\n  function updatePorts() {\n    function naTooltipData(d) {\n      var h = \"<table><tbody<tr><td><i class='flag-icon \" + d.nation + \"'></i></td>\";\n      h += \"<td><span class='port-name'>\" + d.name + \"</span>\";\n      h += d.availableForAll ? \" (accessible to all nations)\" : \"\";\n      h += \"</td></tr></tbody></table>\";\n      h += \"<p>\" + (d.shallow ? \"Shallow\" : \"Deep\");\n      h += \" water port\";\n\n      if (d.countyCapital) {\n        h += \" (county capital)\";\n      }\n\n      if (d.capturer) {\n        h += \" captured by \" + d.capturer + \" \" + __WEBPACK_IMPORTED_MODULE_1_moment___default()(d.lastPortBattle).fromNow();\n      }\n\n      h += \"<br>\";\n\n      if (!d.nonCapturable) {\n        var pbTimeRange = !d.portBattleStartTime ? \"11.00\\u2009\\u2013\\u20098.00\" : (d.portBattleStartTime + 10) % 24 + \".00\\u2009\\u2013\\u2009\" + (d.portBattleStartTime + 13) % 24 + \".00\";\n        h += \"Port battle: \" + pbTimeRange + \", \" + thousandsWithBlanks(d.brLimit) + \" BR, \";\n\n        switch (d.portBattleType) {\n          case \"Large\":\n            h += \"1<sup>st</sup>\";\n            break;\n\n          case \"Medium\":\n            h += \"4<sup>th</sup>\";\n            break;\n\n          case \"Small\":\n            h += \"6<sup>th</sup>\";\n            break;\n        }\n\n        h += \" rate AI\";\n        h += \", \" + d.conquestMarksPension + \" conquest point\";\n        h += d.conquestMarksPension > 1 ? \"s\" : \"\";\n      } else {\n        h += \"Not capturable\";\n      }\n\n      h += \"<br>\" + d.portTax * 100 + \"\\u2009% port tax\";\n      h += d.tradingCompany ? \", trading company level \" + d.tradingCompany : \"\";\n      h += d.laborHoursDiscount ? \", labor hours discount\" : \"\";\n      h += \"</p>\";\n      h += \"<table class='table table-sm'>\";\n\n      if (d.produces.length) {\n        h += \"<tr><td>Produces</td><td>\" + d.produces.join(\", \") + \"</td></tr>\";\n      }\n\n      if (d.drops.length) {\n        h += \"<tr><td>Drops</td><td>\" + d.drops.join(\", \") + \"</tr>\";\n      }\n\n      if (d.consumes.length) {\n        h += \"<tr><td>Consumes</td><td>\" + d.consumes.join(\", \") + \"</tr>\";\n      }\n\n      h += \"</table>\";\n      return h;\n    }\n\n    function portMouseover(d) {\n      if (current.highlightId) {\n        naVoronoiHighlight();\n      }\n\n      d3.select(this).attr(\"data-toggle\", \"tooltip\").attr(\"title\", function (d) {\n        return naTooltipData(d.properties);\n      });\n      $(\"#c\" + d.id).tooltip({\n        delay: {\n          show: defaults.highlightDuration,\n          hide: defaults.highlightDuration\n        },\n        html: true,\n        placement: \"auto\"\n      }).tooltip(\"show\");\n    } // Data join\n\n\n    gPorts = mainGPort.selectAll(\"g.port\").data(current.portData, function (d) {\n      return d.id;\n    }); // Enter\n\n    var nodeGroupsEnter = gPorts.enter().append(\"g\").attr(\"class\", \"port\").attr(\"transform\", function (d) {\n      return \"translate(\" + d.geometry.coordinates[0] + \",\" + d.geometry.coordinates[1] + \")\";\n    });\n    nodeGroupsEnter.append(\"circle\");\n    nodeGroupsEnter.append(\"text\"); // Update\n    // Add flags\n\n    gPorts.merge(nodeGroupsEnter).select(\"circle\").attr(\"id\", function (d) {\n      return \"c\" + d.id;\n    }).attr(\"r\", current.circleSize).attr(\"fill\", function (d) {\n      return \"url(#\" + d.properties.nation + \")\";\n    }).on(\"mouseover\", portMouseover); // Add labels\n\n    if (current.bPortLabelDisplayed) {\n      gPorts.merge(nodeGroupsEnter).select(\"text\").attr(\"dx\", function (d) {\n        return d.properties.dx;\n      }).attr(\"dy\", function (d) {\n        return d.properties.dy;\n      }).attr(\"text-anchor\", function (d) {\n        if (d.properties.dx < 0) {\n          return \"end\";\n        } else {\n          return \"start\";\n        }\n      }).text(function (d) {\n        return d.properties.name;\n      }).attr(\"class\", function (d) {\n        var f = \"na-port-out\";\n\n        if (!d.properties.shallow && !d.properties.countyCapital) {\n          f = \"na-port-in\";\n        }\n\n        return f;\n      });\n    } else {\n      gPorts.merge(nodeGroupsEnter).select(\"text\").text(\"\");\n    } // Remove old\n\n\n    gPorts.exit().remove();\n  }\n\n  function naToggleDisplayTeleportAreas() {\n    mainGVoronoi.style(\"display\", mainGVoronoi.active ? \"none\" : \"inherit\");\n    mainGVoronoi.active = !mainGVoronoi.active;\n  }\n\n  function naVoronoiHighlight() {\n    mainGVoronoi.selectAll(\"path\").attr(\"class\", function () {\n      return d3.select(this).attr(\"id\") === \"v\" + current.highlightId ? \"highlight-voronoi\" : \"\";\n    });\n    mainGPort.selectAll(\"circle\").attr(\"r\", function (d) {\n      return d.id === current.highlightId ? current.circleSize * 3 : current.circleSize;\n    });\n\n    if (current.bPortLabelDisplayed) {\n      mainGPort.selectAll(\"text\").attr(\"dx\", function (d) {\n        return d.id === current.highlightId ? d.properties.dx * 3 : d.properties.dx;\n      }).attr(\"dy\", function (d) {\n        return d.id === current.highlightId ? d.properties.dy * 3 : d.properties.dy;\n      }).style(\"font-size\", function (d) {\n        return d.id === current.highlightId ? current.fontSize * 2 + \"px\" : current.fontSize + \"px\";\n      });\n    }\n  }\n\n  function zoomAndPan(transform) {\n    var t = {};\n\n    if (JSON.stringify(transform) === JSON.stringify(initial.transform)) {\n      t = {\n        delay: 0,\n        duration: 0\n      };\n    } else {\n      t = {\n        delay: 500,\n        duration: 500\n      };\n    }\n\n    current.transform.x = transform.x;\n    current.transform.y = transform.y;\n    current.transform.scale = transform.k;\n    transform.x += defaults.width / 2;\n    transform.y += defaults.height / 2;\n    naSvg.transition().delay(t.delay).duration(t.duration).call(naZoom.transform, transform);\n  }\n\n  function clearMap() {\n    mainGCoord.remove();\n    mainGCoord = naSvg.append(\"g\").attr(\"class\", \"coord\");\n    current.bFirstCoord = true;\n    current.lineData.splice(0, current.lineData.length);\n    current.portData = defaults.portData;\n    $(\"#good-names\").get(0).selectedIndex = 0;\n    updatePorts();\n  }\n\n  function setup() {\n    function stopProp() {\n      if (d3.event.defaultPrevented) {\n        d3.event.stopPropagation();\n      }\n    }\n\n    function setupScaleDomain() {\n      var flattenArray = function flattenArray(arr) {\n        return [].concat.apply([], arr.map(function (element) {\n          return element;\n        }));\n      };\n\n      defaults.xScale.domain(d3.extent([].concat(defaults.portData.map(function (d) {\n        return d.geometry.coordinates[0];\n      }), flattenArray(defaults.PBZoneData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[0];\n        }));\n      })), flattenArray(defaults.fortData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[0];\n        }));\n      })), flattenArray(defaults.towerData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[0];\n        }));\n      })))));\n      defaults.yScale.domain(d3.extent([].concat(defaults.portData.map(function (d) {\n        return d.geometry.coordinates[1];\n      }), flattenArray(defaults.PBZoneData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[1];\n        }));\n      })), flattenArray(defaults.fortData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[1];\n        }));\n      })), flattenArray(defaults.towerData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[1];\n        }));\n      })))));\n    }\n\n    function setupCanvas() {\n      naCanvas = d3.select(\"#na\").append(\"canvas\").attr(\"width\", defaults.width).attr(\"height\", defaults.height).style(\"position\", \"absolute\").style(\"top\", defaults.margin.top + \"px\").style(\"left\", defaults.margin.left + \"px\").on(\"click\", stopProp, true);\n      naContext = naCanvas.node().getContext(\"2d\");\n\n      defaults.image.onload = function () {\n        naDisplayCountries(initial.transform);\n      };\n\n      defaults.image.src = defaults.imageSrc;\n    }\n\n    function setupSvg() {\n      var zoomPadding = defaults.coord.max / 50;\n      naZoom = d3.zoom().scaleExtent([defaults.minScale, defaults.maxScale]).translateExtent([[defaults.coord.min - zoomPadding, defaults.coord.min - zoomPadding], [defaults.coord.max + zoomPadding, defaults.coord.max + zoomPadding]]).on(\"zoom\", naZoomed);\n      naSvg = d3.select(\"#na\").append(\"svg\").attr(\"id\", \"na-svg\").attr(\"width\", defaults.width).attr(\"height\", defaults.height).style(\"position\", \"absolute\").style(\"top\", defaults.margin.top + \"px\").style(\"left\", defaults.margin.left + \"px\").call(naZoom).on(\"dblclick.zoom\", null).on(\"click\", stopProp, true).on(\"dblclick\", doubleClickAction);\n      svgDef = naSvg.append(\"defs\");\n      svgDef.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 5).attr(\"refY\", 0).attr(\"markerWidth\", 4).attr(\"markerHeight\", 4).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"class\", \"arrow-head\");\n      mainGVoronoi = naSvg.append(\"g\").attr(\"class\", \"voronoi\");\n      mainGPort = naSvg.append(\"g\").attr(\"class\", \"port\");\n      mainGPBZone = naSvg.append(\"g\").attr(\"class\", \"pb\").style(\"display\", \"none\");\n      mainGCoord = naSvg.append(\"g\").attr(\"class\", \"coord\");\n    }\n\n    function setupPorts() {\n      var nations = [\"DE\", \"DK\", \"ES\", \"FR\", \"FT\", \"GB\", \"NT\", \"PL\", \"PR\", \"RU\", \"SE\", \"US\", \"VP\"];\n      nations.forEach(function (nation) {\n        svgDef.append(\"pattern\").attr(\"id\", nation).attr(\"width\", \"100%\").attr(\"height\", \"100%\").attr(\"viewBox\", \"0 0 \" + defaults.iconSize + \" \" + defaults.iconSize).append(\"image\").attr(\"height\", defaults.iconSize).attr(\"width\", defaults.iconSize).attr(\"href\", \"icons/\" + nation + \".svg\");\n      });\n    }\n\n    function setupTeleportAreas() {\n      // Extract port coordinates\n      naTeleportPorts = defaults.portData // Use only ports that deep water ports and not a county capital\n      .filter(function (d) {\n        return !d.properties.shallow && !d.properties.countyCapital;\n      }) // Map to coordinates array\n      .map(function (d) {\n        return {\n          id: d.id,\n          coord: {\n            x: d.geometry.coordinates[0],\n            y: d.geometry.coordinates[1]\n          }\n        };\n      });\n      pathVoronoi = mainGVoronoi.selectAll(\".voronoi\").data(naTeleportPorts).enter().append(\"path\").attr(\"id\", function (d) {\n        return \"v\" + d.id;\n      });\n      naVoronoiDiagram = d3.voronoi().extent(defaults.coord.voronoi).x(function (d) {\n        return d.coord.x;\n      }).y(function (d) {\n        return d.coord.y;\n      })(naTeleportPorts); // Draw teleport areas\n\n      pathVoronoi.data(naVoronoiDiagram.polygons()).attr(\"d\", function (d) {\n        return d ? \"M\" + d.join(\"L\") + \"Z\" : null;\n      }).on(\"mouseover\", function () {\n        var ref = d3.mouse(this);\n        var mx = ref[0],\n            my = ref[1]; // use the new diagram.find() function to find the voronoi site closest to\n        // the mouse, limited by max distance defined by defaults.voronoiRadius\n\n        var site = naVoronoiDiagram.find(mx, my, defaults.voronoiRadius);\n\n        if (site) {\n          current.highlightId = site.data.id;\n          naVoronoiHighlight();\n        }\n      }).on(\"mouseout\", function () {\n        naVoronoiHighlight();\n      });\n      naToggleDisplayTeleportAreas();\n    }\n\n    function setupPBZones() {\n      mainGPBZone.append(\"path\").datum(defaults.PBZoneData).attr(\"class\", \"pb-zone\").attr(\"d\", d3.geoPath().pointRadius(4));\n      mainGPBZone.append(\"path\").datum(defaults.towerData).attr(\"class\", \"tower\").attr(\"d\", d3.geoPath().pointRadius(1.5));\n      mainGPBZone.append(\"path\").datum(defaults.fortData).attr(\"class\", \"fort\").attr(\"d\", d3.geoPath().pointRadius(2));\n    }\n\n    function setupSelects() {\n      function setupPortSelect() {\n        var portNames = $(\"#port-names\");\n        var selectPorts = defaults.portData.map(function (d) {\n          return {\n            coord: [d.geometry.coordinates[0], d.geometry.coordinates[1]],\n            name: d.properties.name\n          };\n        }).sort(function (a, b) {\n          if (a.name < b.name) {\n            return -1;\n          }\n\n          if (a.name > b.name) {\n            return 1;\n          }\n\n          return 0;\n        });\n        portNames.append($(\"<option>\", {\n          value: 0,\n          text: \"Select a port\"\n        }));\n        selectPorts.forEach(function (port) {\n          portNames.append($(\"<option>\", {\n            value: port.coord,\n            text: port.name\n          }));\n        });\n      }\n\n      function setupGoodSelect() {\n        var goodNames = $(\"#good-names\");\n        var selectGoods = new Map();\n        var goodsPerPort = defaults.portData.map(function (d) {\n          var goods = d.properties.drops;\n          goods += d.properties.produces ? \",\" + d.properties.produces : \"\";\n          return {\n            id: d.id,\n            goods: goods\n          };\n        });\n        goodsPerPort.forEach(function (port) {\n          port.goods.split(\",\").forEach(function (good) {\n            if (good) {\n              var ports = new Set(selectGoods.get(good)).add(port.id);\n              selectGoods.set(good, ports);\n            }\n          });\n        });\n        selectGoods = new Map(Array.from(selectGoods).sort());\n        goodNames.append($(\"<option>\", {\n          value: 0,\n          text: \"Select a good\"\n        }));\n\n        for (var _iterator = selectGoods.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref2;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref2 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref2 = _i.value;\n          }\n\n          var _ref3 = _ref2;\n          var _key = _ref3[0];\n          var _portIds = _ref3[1];\n          var ids = \"\";\n\n          for (var _iterator2 = _portIds, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n            var _ref4;\n\n            if (_isArray2) {\n              if (_i2 >= _iterator2.length) break;\n              _ref4 = _iterator2[_i2++];\n            } else {\n              _i2 = _iterator2.next();\n              if (_i2.done) break;\n              _ref4 = _i2.value;\n            }\n\n            var _id = _ref4;\n            ids += \",\" + _id;\n          }\n\n          goodNames.append($(\"<option>\", {\n            value: ids.substr(1),\n            text: _key\n          }));\n        }\n      }\n\n      function goToPort(coord) {\n        var c = coord.split(\",\"),\n            x = c[0],\n            y = c[1];\n        zoomAndPan(d3.zoomIdentity.translate(-x, -y).scale(1));\n      }\n\n      setupPortSelect();\n      $(\"#port-names\").change(function () {\n        goToPort($(\"#port-names\").val());\n      });\n      setupGoodSelect();\n      $(\"#good-names\").change(function () {\n        var portIds = $(\"#good-names\").val().split(\",\");\n\n        if (portIds.includes(\"0\")) {\n          current.portData = defaults.portData;\n        } else {\n          current.portData = defaults.portData.filter(function (d) {\n            return portIds.includes(d.id);\n          });\n        }\n\n        updatePorts();\n      });\n    }\n\n    setupScaleDomain();\n    setupCanvas();\n    setupSvg();\n    setupTeleportAreas();\n    setupPorts();\n    setupPBZones();\n    setupSelects();\n    __WEBPACK_IMPORTED_MODULE_1_moment___default.a.locale(\"en-gb\");\n  }\n\n  function predictWind(currentWind, predictTime) {\n    function compassToDegrees(compass) {\n      var degree = 360 / defaults.compassDirections.length;\n      return defaults.compassDirections.indexOf(compass) * degree;\n    }\n\n    function printPredictedWind(predictedWindDegrees, predictTime, currentWind, currentTime) {\n      function printWindLine(x, dx, y, dy, degrees) {\n        var compass = degreesToCompass(degrees);\n        current.lineData.push([x + dx / 2, y + dy / 2]);\n        current.lineData.push([x - dx / 2, y - dy / 2]);\n        gCompass.datum(current.lineData).attr(\"d\", defaults.line).attr(\"class\", \"wind\").attr(\"marker-end\", \"url(#arrow)\");\n        var rect = mainGCoord.append(\"rect\");\n        var svg = mainGCoord.append(\"svg\");\n        var text1 = svg.append(\"text\").attr(\"x\", \"50%\").attr(\"y\", \"33%\").attr(\"class\", \"wind-text\").text(\"From \" + compass + \" at \" + predictTime);\n        var text2 = svg.append(\"text\").attr(\"x\", \"50%\").attr(\"y\", \"66%\").attr(\"class\", \"wind-text-current\").text(\"Currently at \" + currentTime + \" from \" + currentWind);\n        var bbox1 = text1.node().getBoundingClientRect(),\n            bbox2 = text2.node().getBoundingClientRect(),\n            height = Math.max(bbox1.height, bbox2.height) * 2 + current.fontSize,\n            width = Math.max(bbox1.width, bbox2.width) + current.fontSize;\n        svg.attr(\"x\", x - width / 2).attr(\"y\", y + Math.abs(dy) / 2).attr(\"height\", height).attr(\"width\", width);\n        rect.attr(\"x\", x - width / 2).attr(\"y\", y - Math.abs(dy) / 2 - current.fontSize / 2).attr(\"height\", height + Math.abs(dy) + current.fontSize / 2).attr(\"width\", width);\n      }\n\n      var targetScale = 4,\n          scale = targetScale / current.transform.scale,\n          x = -current.transform.x * scale,\n          xCompass = -current.transform.x / current.transform.scale - defaults.width / 25,\n          y = -current.transform.y * scale,\n          yCompass = -current.transform.y / current.transform.scale - defaults.height / 25,\n          length = 40,\n          radians = 0.0174533 * (predictedWindDegrees - 90),\n          dx = length * Math.cos(radians),\n          dy = length * Math.sin(radians);\n      clearMap();\n      plotCourse(xCompass, yCompass, \"wind\");\n      printWindLine(xCompass, dx, yCompass, dy, predictedWindDegrees);\n      zoomAndPan(d3.zoomIdentity.translate(-x, -y).scale(targetScale));\n    }\n\n    var secondsForFullCircle = 48 * 60,\n        fullCircle = 360,\n        degreesPerSecond = fullCircle / secondsForFullCircle;\n    var currentWindDegrees;\n    var regex = /(\\d+)[\\s:.](\\d+)/;\n    var match = regex.exec(predictTime),\n        predictHours = parseInt(match[1]),\n        predictMinutes = parseInt(match[2]); // Set current wind in degrees\n\n    if (isNaN(currentWind)) {\n      currentWindDegrees = compassToDegrees(currentWind);\n    } else {\n      currentWindDegrees = +currentWind;\n    }\n\n    var currentDate = __WEBPACK_IMPORTED_MODULE_1_moment___default()().utc().seconds(0).milliseconds(0),\n        predictDate = __WEBPACK_IMPORTED_MODULE_1_moment___default()(currentDate).hour(predictHours).minutes(predictMinutes);\n\n    if (predictDate.isBefore(currentDate)) {\n      predictDate.add(1, \"day\");\n    }\n\n    var timeDiffInSec = predictDate.diff(currentDate, \"seconds\");\n    var predictedWindDegrees = (currentWindDegrees - degreesPerSecond * timeDiffInSec) % 360;\n    console.log(\"currentWind: \" + currentWind + \" currentWindDegrees: \" + currentWindDegrees);\n    console.log(\"   currentDate: \" + currentDate.format() + \" predictDate: \" + predictDate.format() + \" timeDiffInSec: \" + timeDiffInSec);\n    console.log(\"   predictedWindDegrees: \" + predictedWindDegrees + \" predictTime: \" + predictTime);\n    printPredictedWind(predictedWindDegrees, predictDate.format(\"HH.mm\"), currentWind, currentDate.format(\"HH.mm\"));\n  }\n\n  function naReady(error, naMap, pbZones) {\n    if (error) {\n      throw error;\n    } // Read map data\n\n\n    defaults.portData = Object(__WEBPACK_IMPORTED_MODULE_0_topojson_client__[\"a\" /* feature */])(naMap, naMap.objects.ports).features;\n    current.portData = defaults.portData;\n    defaults.PBZoneData = Object(__WEBPACK_IMPORTED_MODULE_0_topojson_client__[\"a\" /* feature */])(pbZones, pbZones.objects.pbZones);\n    defaults.fortData = Object(__WEBPACK_IMPORTED_MODULE_0_topojson_client__[\"a\" /* feature */])(pbZones, pbZones.objects.forts);\n    defaults.towerData = Object(__WEBPACK_IMPORTED_MODULE_0_topojson_client__[\"a\" /* feature */])(pbZones, pbZones.objects.towers);\n    setup();\n    zoomAndPan(initial.transform); //updatePorts(current.portData.filter(d => [\"234\", \"237\", \"238\", \"239\", \"240\"].includes(d.id)));\n\n    updatePorts();\n    /*\n    let predictTime = moment().utc(),\n        direction = \"n\".toUpperCase();\n    console.log(`---->   predictTime: ${predictTime.format()}`);\n    predictWind(direction, `${predictTime.hours()}:${predictTime.minutes()}`);\n    predictTime.add(48 * 6, \"minutes\");\n    console.log(`---->   predictTime: ${predictTime.format()}`);\n    predictWind(direction, `${predictTime.hours()}:${predictTime.minutes()}`);\n    */\n\n    $(\"#f11\").submit(function (event) {\n      var x = $(\"#x-coord\").val(),\n          z = $(\"#z-coord\").val();\n      goToF11(x, z);\n      event.preventDefault();\n    });\n    $(\"#direction\").knob({\n      bgColor: \"#ede1d2\",\n      // primary-200\n      thickness: 0.2,\n      min: 0,\n      max: 359,\n      step: 360 / defaults.compassDirections.length,\n      cursor: true,\n      fgColor: \"#917f68\",\n      // primary-700\n      draw: function draw() {\n        $(this.i).css(\"class\", \"knob\");\n      },\n      format: function format(input) {\n        return degreesToCompass(input);\n      }\n    });\n    $(\"#windPrediction\").submit(function (event) {\n      var currentWind = $(\"#direction\").val().toUpperCase(),\n          time = $(\"#time\").val();\n      predictWind(currentWind, time);\n      $(\"#predictDropdown\").dropdown(\"toggle\");\n      event.preventDefault();\n    });\n    $(\"#reset\").on(\"click\", function () {\n      clearMap();\n    });\n    $(\".radio-group\").change(function () {\n      current.radioButton = $(\"input[name='mouseFunction']:checked\").val();\n      clearMap();\n    });\n  }\n\n  d3.queue().defer(d3.json, defaults.mapJson).defer(d3.json, defaults.pbJson).await(naReady);\n}\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ })

})
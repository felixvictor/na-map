webpackHotUpdate(0,{

/***/ 13:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {/* harmony export (immutable) */ __webpack_exports__[\"a\"] = naDisplay;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_topojson_client__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_moment__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_moment__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment_locale_en_gb__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_moment_locale_en_gb___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_moment_locale_en_gb__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_knob__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_knob___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jquery_knob__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_bootstrap_js_dist_tooltip__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_bootstrap_js_dist_tooltip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_bootstrap_js_dist_tooltip__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_bootstrap_js_dist_util__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_bootstrap_js_dist_util___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_bootstrap_js_dist_util__);\n/*\n Draws teleport map for Naval Action\n\n iB 2017\n */\n\n\n\n\n\n\nfunction naDisplay(serverName) {\n  var naSvg, naCanvas, naContext, svgDef, naZoom;\n  var mainGPort, mainGPBZone, mainGVoronoi, mainGCoord, gCompass, naVoronoiDiagram, pathVoronoi, naTeleportPorts, gPorts;\n  var defaults = {\n    margin: {\n      top: parseInt($(\".navbar\").css(\"height\")),\n      right: 20,\n      bottom: 20,\n      left: 20\n    },\n    coord: {\n      min: 0,\n      max: 8192\n    },\n    maxScale: 10,\n    fontSize: 16,\n    circleSize: 10,\n    iconSize: 50,\n    PBZoneZoomScale: 1.5,\n    labelZoomScale: 0.5,\n    highlightDuration: 200,\n    mapJson: serverName + \".json\",\n    pbJson: \"pb.json\",\n    imageSrc: \"images/na-map.jpg\",\n    image: new Image(),\n    line: d3.line(),\n    transformMatrix: {\n      A: -0.00499866779363828,\n      B: -0.00000021464254980645,\n      C: 4096.88635151897,\n      D: 4096.90282787469\n    },\n    transformMatrixInv: {\n      A: -200.053302087577,\n      B: -0.00859027897636011,\n      C: 819630.836437126,\n      D: -819563.745651571\n    },\n    compassDirections: [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\"]\n  };\n  defaults.width = top.innerWidth - defaults.margin.left - defaults.margin.right;\n  defaults.height = top.innerHeight - defaults.margin.top - defaults.margin.bottom;\n  defaults.minScale = Math.min(defaults.width / defaults.coord.max, defaults.height / defaults.coord.max);\n  var initial = {\n    scale: defaults.minScale,\n    x: -defaults.coord.max / 2 * defaults.minScale,\n    y: -defaults.coord.max / 2 * defaults.minScale\n  };\n  initial.transform = d3.zoomIdentity.translate(initial.x, initial.y).scale(initial.scale);\n  defaults.xScale = d3.scaleLinear().clamp(true).range([0, defaults.width]);\n  defaults.yScale = d3.scaleLinear().clamp(true).range([0, defaults.height]);\n  defaults.coord.voronoi = [[defaults.coord.min - 1, defaults.coord.min - 1], [defaults.coord.max + 1, defaults.coord.max + 1]]; // limit how far away the mouse can be from finding a voronoi site\n\n  defaults.voronoiRadius = Math.min(defaults.height, defaults.width);\n  var current = {\n    transform: {\n      x: initial.x,\n      y: initial.y,\n      scale: initial.scale\n    },\n    fontSize: defaults.fontSize,\n    circleSize: defaults.circleSize,\n    highlightId: null,\n    bPBZoneDisplayed: false,\n    bPortLabelDisplayed: true,\n    bFirstCoord: true,\n    radioButton: \"compass\",\n    lineData: []\n  };\n\n  var thousandsWithBlanks = function thousandsWithBlanks(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"\\u2009\");\n  };\n\n  var formatCoord = function formatCoord(x) {\n    var r = thousandsWithBlanks(Math.abs(Math.trunc(x)));\n\n    if (x < 0) {\n      r = \"\\u2212\\u2009\" + r;\n    }\n\n    return r;\n  }; // https://stackoverflow.com/questions/7490660/converting-wind-direction-in-angles-to-text-words\n\n\n  function degreesToCompass(degrees) {\n    var val = Math.floor(degrees / 22.5 + 0.5);\n    return defaults.compassDirections[val % 16];\n  }\n\n  function naDisplayCountries(transform) {\n    function drawImage() {\n      naContext.drawImage(defaults.image, 0, 0);\n      naContext.getImageData(0, 0, defaults.width, defaults.height);\n    }\n\n    naContext.save();\n    naContext.clearRect(0, 0, defaults.width, defaults.height);\n    naContext.translate(transform.x, transform.y);\n    naContext.scale(transform.k, transform.k);\n    drawImage();\n    naContext.restore();\n  }\n\n  function doubleClickAction() {\n    function printCoord(x, y) {\n      // svg coord to F11 coord\n      function convertInvCoordX(x, y) {\n        return defaults.transformMatrixInv.A * x + defaults.transformMatrixInv.B * y + defaults.transformMatrixInv.C;\n      } // svg coord to F11 coord\n\n\n      function convertInvCoordY(x, y) {\n        return defaults.transformMatrixInv.B * x - defaults.transformMatrixInv.A * y + defaults.transformMatrixInv.D;\n      }\n\n      var F11X = convertInvCoordX(x, y) * -1,\n          F11Y = convertInvCoordY(x, y) * -1;\n\n      if (current.radioButton === \"F11\") {\n        printF11Coord(x, y, F11X, F11Y);\n      } else {\n        plotCourse(x, y);\n      }\n    }\n\n    var coord = d3.mouse(this),\n        transform = d3.zoomTransform(this);\n    var mx = coord[0],\n        my = coord[1],\n        tk = transform.k,\n        tx = transform.x,\n        ty = transform.y;\n    var x = (mx - tx) / tk,\n        y = (my - ty) / tk;\n\n    if (current.radioButton === \"F11\") {\n      printCoord(x, y);\n    } else {\n      plotCourse(x, y);\n    }\n\n    zoomAndPan(d3.zoomIdentity.translate(-x, -y).scale(1));\n  }\n\n  function plotCourse(x, y, style) {\n    if (style === void 0) {\n      style = \"course\";\n    }\n\n    function printCompass(x, y, style) {\n      var compassSize = \"course\" === style ? 100 : 30;\n      mainGCoord.append(\"image\").attr(\"class\", \"compass\").attr(\"x\", x).attr(\"y\", y).attr(\"transform\", \"translate(\" + -compassSize / 2 + \",\" + -compassSize / 2 + \")\").attr(\"height\", compassSize).attr(\"width\", compassSize).attr(\"xlink:href\", \"icons/compass.svg\");\n      gCompass = mainGCoord.append(\"path\");\n    }\n\n    function printLine(x, y) {\n      // https://stackoverflow.com/questions/9970281/java-calculating-the-angle-between-two-points-in-degrees\n      function rotationAngleInDegrees(centerPt, targetPt) {\n        // Converts from radians to degrees\n        // http://cwestblog.com/2012/11/12/javascript-degree-and-radian-conversion/\n        Math.radiansToDegrees = function (radians) {\n          return radians * 180 / Math.PI;\n        };\n\n        var theta = Math.atan2(targetPt[1] - centerPt[1], targetPt[0] - centerPt[0]);\n        theta -= Math.PI / 2.0;\n        var angle = Math.radiansToDegrees(theta);\n\n        if (angle < 0) {\n          angle += 360;\n        }\n\n        return angle;\n      }\n\n      var degrees = rotationAngleInDegrees(current.lineData[current.lineData.length - 1], current.lineData[current.lineData.length - 2]);\n      var compass = degreesToCompass(degrees);\n      gCompass.datum(current.lineData).attr(\"d\", defaults.line);\n      var svg = mainGCoord.append(\"svg\").attr(\"x\", x).attr(\"y\", y);\n      var rect = svg.append(\"rect\");\n      var text = svg.append(\"text\").attr(\"x\", \"50%\").attr(\"y\", \"50%\").text(compass + \" (\" + Math.round(degrees) + \"\\xB0)\");\n      var bbox = text.node().getBBox();\n      var height = bbox.height + defaults.fontSize,\n          width = bbox.width + defaults.fontSize;\n      rect.attr(\"x\", 0).attr(\"y\", 0).attr(\"height\", height).attr(\"width\", width);\n      svg.attr(\"height\", height).attr(\"width\", width);\n    }\n\n    current.lineData.push([x, y]);\n\n    if (current.bFirstCoord) {\n      printCompass(x, y, style);\n      current.bFirstCoord = !current.bFirstCoord;\n    } else {\n      printLine(x, y);\n    }\n  }\n\n  function goToF11(F11X, F11Y) {\n    // F11 coord to svg coord\n    function convertCoordX(x, y) {\n      return defaults.transformMatrix.A * x + defaults.transformMatrix.B * y + defaults.transformMatrix.C;\n    } // F11 coord to svg coord\n\n\n    function convertCoordY(x, y) {\n      return defaults.transformMatrix.B * x - defaults.transformMatrix.A * y + defaults.transformMatrix.D;\n    }\n\n    F11X = +F11X * -1;\n    F11Y = +F11Y * -1;\n    var x = convertCoordX(F11X, F11Y),\n        y = convertCoordY(F11X, F11Y);\n    clearMap();\n\n    if (current.radioButton === \"F11\") {\n      printF11Coord(x, y, F11X, F11Y);\n    } else {\n      plotCourse(x, y);\n    }\n\n    zoomAndPan(d3.zoomIdentity.translate(-x, -y).scale(1));\n  }\n\n  function printF11Coord(x, y, textX, textY) {\n    var g = mainGCoord.append(\"g\").attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n    g.append(\"circle\").attr(\"r\", 20);\n    g.append(\"text\").attr(\"dx\", \"-1.5em\").attr(\"dy\", \"-.5em\").text(formatCoord(textX));\n    g.append(\"text\").attr(\"dx\", \"-1.5em\").attr(\"dy\", \".5em\").text(formatCoord(textY));\n  }\n\n  function naZoomed() {\n    function configureMap(scale) {\n      function naTogglePBZones() {\n        mainGPBZone.style(\"display\", mainGPBZone.active ? \"none\" : \"inherit\");\n        mainGPBZone.active = !mainGPBZone.active;\n      }\n\n      if (defaults.PBZoneZoomScale < scale) {\n        if (!current.bPBZoneDisplayed) {\n          naTogglePBZones();\n          naToggleDisplayTeleportAreas();\n          current.highlightId = null;\n          current.bPBZoneDisplayed = true;\n        }\n      } else {\n        if (current.bPBZoneDisplayed) {\n          naTogglePBZones();\n          naToggleDisplayTeleportAreas();\n          current.bPBZoneDisplayed = false;\n        }\n      }\n\n      if (defaults.labelZoomScale > scale) {\n        if (current.bPortLabelDisplayed) {\n          current.bPortLabelDisplayed = false;\n        }\n      } else {\n        if (!current.bPortLabelDisplayed) {\n          current.bPortLabelDisplayed = true;\n        }\n      }\n\n      updatePorts();\n    }\n\n    var transform = d3.event.transform; //console.log(`transform: ${JSON.stringify(transform)}`);\n\n    configureMap(transform.k);\n    naDisplayCountries(transform);\n    mainGPort.attr(\"transform\", transform);\n    mainGVoronoi.attr(\"transform\", transform);\n    mainGPBZone.attr(\"transform\", transform);\n    mainGCoord.attr(\"transform\", transform);\n    current.circleSize = defaults.circleSize / transform.k;\n    mainGPort.selectAll(\"circle\").attr(\"r\", current.circleSize);\n    mainGPort.selectAll(\"text\").attr(\"dx\", function (d) {\n      return d.properties.dx / transform.k;\n    }).attr(\"dy\", function (d) {\n      return d.properties.dy / transform.k;\n    });\n\n    if (current.bPortLabelDisplayed) {\n      current.fontSize = defaults.fontSize / transform.k;\n      mainGPort.selectAll(\"text\").style(\"font-size\", current.fontSize);\n\n      if (current.highlightId && !current.bPBZoneDisplayed) {\n        naVoronoiHighlight();\n      }\n    }\n  }\n\n  function updatePorts() {\n    function naTooltipData(d) {\n      var h = \"<table><tbody<tr><td><i class='flag-icon \" + d.nation + \"'></i></td>\";\n      h += \"<td><span class='port-name'>\" + d.name + \"</span>\";\n      h += d.availableForAll ? \" (accessible to all nations)\" : \"\";\n      h += \"</td></tr></tbody></table>\";\n      h += \"<p>\" + (d.shallow ? \"Shallow\" : \"Deep\");\n      h += \" water port\";\n\n      if (d.countyCapital) {\n        h += \" (county capital)\";\n      }\n\n      if (d.capturer) {\n        h += \" captured by \" + d.capturer + \" \" + __WEBPACK_IMPORTED_MODULE_1_moment___default()(d.lastPortBattle).fromNow();\n      }\n\n      h += \"<br>\";\n\n      if (!d.nonCapturable) {\n        var pbTimeRange = !d.portBattleStartTime ? \"11.00\\u2009\\u2013\\u20098.00\" : (d.portBattleStartTime + 10) % 24 + \".00\\u2009\\u2013\\u2009\" + (d.portBattleStartTime + 13) % 24 + \".00\";\n        h += \"Port battle: \" + pbTimeRange + \", \" + thousandsWithBlanks(d.brLimit) + \" BR, \";\n\n        switch (d.portBattleType) {\n          case \"Large\":\n            h += \"1<sup>st</sup>\";\n            break;\n\n          case \"Medium\":\n            h += \"4<sup>th</sup>\";\n            break;\n\n          case \"Small\":\n            h += \"6<sup>th</sup>\";\n            break;\n        }\n\n        h += \" rate AI\";\n        h += \", \" + d.conquestMarksPension + \" conquest point\";\n        h += d.conquestMarksPension > 1 ? \"s\" : \"\";\n      } else {\n        h += \"Not capturable\";\n      }\n\n      h += \"<br>\" + d.portTax * 100 + \"\\u2009% port tax\";\n      h += d.tradingCompany ? \", trading company level \" + d.tradingCompany : \"\";\n      h += d.laborHoursDiscount ? \", labor hours discount\" : \"\";\n      h += \"</p>\";\n      h += \"<table class='table table-sm'>\";\n\n      if (d.produces.length) {\n        h += \"<tr><td>Produces</td><td>\" + d.produces.join(\", \") + \"</td></tr>\";\n      }\n\n      if (d.drops.length) {\n        h += \"<tr><td>Drops</td><td>\" + d.drops.join(\", \") + \"</tr>\";\n      }\n\n      if (d.consumes.length) {\n        h += \"<tr><td>Consumes</td><td>\" + d.consumes.join(\", \") + \"</tr>\";\n      }\n\n      h += \"</table>\";\n      return h;\n    }\n\n    function portMouseover(d) {\n      if (current.highlightId) {\n        naVoronoiHighlight();\n      }\n\n      d3.select(this).attr(\"data-toggle\", \"tooltip\").attr(\"title\", function (d) {\n        return naTooltipData(d.properties);\n      });\n      $(\"#c\" + d.id).tooltip({\n        delay: {\n          show: defaults.highlightDuration,\n          hide: defaults.highlightDuration\n        },\n        html: true,\n        placement: \"auto\"\n      }).tooltip(\"show\");\n    } // Data join\n\n\n    gPorts = mainGPort.selectAll(\"g.port\").data(current.portData, function (d) {\n      return d.id;\n    }); // Enter\n\n    var nodeGroupsEnter = gPorts.enter().append(\"g\").attr(\"class\", \"port\").attr(\"transform\", function (d) {\n      return \"translate(\" + d.geometry.coordinates[0] + \",\" + d.geometry.coordinates[1] + \")\";\n    });\n    nodeGroupsEnter.append(\"circle\");\n    nodeGroupsEnter.append(\"circle\");\n    nodeGroupsEnter.append(\"text\"); // Update\n    // Add flags\n\n    gPorts.merge(nodeGroupsEnter).select(\"circle:nth-child(2)\").attr(\"id\", function (d) {\n      return \"c\" + d.id;\n    }).attr(\"r\", current.circleSize).attr(\"fill\", function (d) {\n      return \"url(#\" + d.properties.nation + \")\";\n    }).attr(\"class\", function (d) {\n      return d.properties.availableForAll ? \"opaque\" : \"\";\n    }).on(\"mouseover\", portMouseover);\n    gPorts.select(\"circle:nth-child(1)\").attr(\"r\", current.circleSize).attr(\"fill\", function (d) {\n      return d.properties.availableForAll ? \"url(#NT)\" : \"none\";\n    }); // Add labels\n\n    if (current.bPortLabelDisplayed) {\n      gPorts.merge(nodeGroupsEnter).select(\"text\").attr(\"dx\", function (d) {\n        return d.properties.dx;\n      }).attr(\"dy\", function (d) {\n        return d.properties.dy;\n      }).attr(\"text-anchor\", function (d) {\n        if (d.properties.dx < 0) {\n          return \"end\";\n        } else {\n          return \"start\";\n        }\n      }).text(function (d) {\n        return d.properties.name;\n      }).attr(\"class\", function (d) {\n        var f = \"na-port-out\";\n\n        if (!d.properties.shallow && !d.properties.countyCapital) {\n          f = \"na-port-in\";\n        }\n\n        return f;\n      });\n    } else {\n      gPorts.merge(nodeGroupsEnter).select(\"text\").text(\"\");\n    } // Remove old\n\n\n    gPorts.exit().remove();\n  }\n\n  function naToggleDisplayTeleportAreas() {\n    mainGVoronoi.style(\"display\", mainGVoronoi.active ? \"none\" : \"inherit\");\n    mainGVoronoi.active = !mainGVoronoi.active;\n  }\n\n  function naVoronoiHighlight() {\n    mainGVoronoi.selectAll(\"path\").attr(\"class\", function () {\n      return d3.select(this).attr(\"id\") === \"v\" + current.highlightId ? \"highlight-voronoi\" : \"\";\n    });\n    mainGPort.selectAll(\"circle\").attr(\"r\", function (d) {\n      return d.id === current.highlightId ? current.circleSize * 3 : current.circleSize;\n    });\n\n    if (current.bPortLabelDisplayed) {\n      mainGPort.selectAll(\"text\").attr(\"dx\", function (d) {\n        return d.id === current.highlightId ? d.properties.dx * 3 : d.properties.dx;\n      }).attr(\"dy\", function (d) {\n        return d.id === current.highlightId ? d.properties.dy * 3 : d.properties.dy;\n      }).style(\"font-size\", function (d) {\n        return d.id === current.highlightId ? current.fontSize * 2 + \"px\" : current.fontSize + \"px\";\n      });\n    }\n  }\n\n  function zoomAndPan(transform) {\n    var t = {};\n\n    if (JSON.stringify(transform) === JSON.stringify(initial.transform)) {\n      t = {\n        delay: 0,\n        duration: 0\n      };\n    } else {\n      t = {\n        delay: 500,\n        duration: 500\n      };\n    }\n\n    current.transform.x = transform.x;\n    current.transform.y = transform.y;\n    current.transform.scale = transform.k;\n    transform.x += defaults.width / 2;\n    transform.y += defaults.height / 2;\n    naSvg.transition().delay(t.delay).duration(t.duration).call(naZoom.transform, transform);\n  }\n\n  function clearMap() {\n    mainGCoord.remove();\n    mainGCoord = naSvg.append(\"g\").attr(\"class\", \"coord\");\n    current.bFirstCoord = true;\n    current.lineData.splice(0, current.lineData.length);\n    current.portData = defaults.portData;\n    $(\"#good-names\").get(0).selectedIndex = 0;\n    updatePorts();\n  }\n\n  function setup() {\n    function stopProp() {\n      if (d3.event.defaultPrevented) {\n        d3.event.stopPropagation();\n      }\n    }\n\n    function setupScaleDomain() {\n      var flattenArray = function flattenArray(arr) {\n        return [].concat.apply([], arr.map(function (element) {\n          return element;\n        }));\n      };\n\n      defaults.xScale.domain(d3.extent([].concat(defaults.portData.map(function (d) {\n        return d.geometry.coordinates[0];\n      }), flattenArray(defaults.PBZoneData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[0];\n        }));\n      })), flattenArray(defaults.fortData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[0];\n        }));\n      })), flattenArray(defaults.towerData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[0];\n        }));\n      })))));\n      defaults.yScale.domain(d3.extent([].concat(defaults.portData.map(function (d) {\n        return d.geometry.coordinates[1];\n      }), flattenArray(defaults.PBZoneData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[1];\n        }));\n      })), flattenArray(defaults.fortData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[1];\n        }));\n      })), flattenArray(defaults.towerData.features.map(function (d) {\n        return [].concat(d.geometry.coordinates.map(function (d) {\n          return d[1];\n        }));\n      })))));\n    }\n\n    function setupCanvas() {\n      naCanvas = d3.select(\"#na\").append(\"canvas\").attr(\"width\", defaults.width).attr(\"height\", defaults.height).style(\"position\", \"absolute\").style(\"top\", defaults.margin.top + \"px\").style(\"left\", defaults.margin.left + \"px\").on(\"click\", stopProp, true);\n      naContext = naCanvas.node().getContext(\"2d\");\n\n      defaults.image.onload = function () {\n        naDisplayCountries(initial.transform);\n      };\n\n      defaults.image.src = defaults.imageSrc;\n    }\n\n    function setupSvg() {\n      var zoomPadding = defaults.coord.max / 50;\n      naZoom = d3.zoom().scaleExtent([defaults.minScale, defaults.maxScale]).translateExtent([[defaults.coord.min - zoomPadding, defaults.coord.min - zoomPadding], [defaults.coord.max + zoomPadding, defaults.coord.max + zoomPadding]]).on(\"zoom\", naZoomed);\n      naSvg = d3.select(\"#na\").append(\"svg\").attr(\"id\", \"na-svg\").attr(\"width\", defaults.width).attr(\"height\", defaults.height).style(\"position\", \"absolute\").style(\"top\", defaults.margin.top + \"px\").style(\"left\", defaults.margin.left + \"px\").call(naZoom).on(\"dblclick.zoom\", null).on(\"click\", stopProp, true).on(\"dblclick\", doubleClickAction);\n      svgDef = naSvg.append(\"defs\");\n      svgDef.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 5).attr(\"refY\", 0).attr(\"markerWidth\", 4).attr(\"markerHeight\", 4).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"class\", \"arrow-head\");\n      mainGVoronoi = naSvg.append(\"g\").attr(\"class\", \"voronoi\");\n      mainGPort = naSvg.append(\"g\").attr(\"class\", \"port\");\n      mainGPBZone = naSvg.append(\"g\").attr(\"class\", \"pb\").style(\"display\", \"none\");\n      mainGCoord = naSvg.append(\"g\").attr(\"class\", \"coord\");\n    }\n\n    function setupPorts() {\n      var nations = [\"DE\", \"DK\", \"ES\", \"FR\", \"FT\", \"GB\", \"NT\", \"PL\", \"PR\", \"RU\", \"SE\", \"US\", \"VP\"];\n      nations.forEach(function (nation) {\n        svgDef.append(\"pattern\").attr(\"id\", nation).attr(\"width\", \"100%\").attr(\"height\", \"100%\").attr(\"viewBox\", \"0 0 \" + defaults.iconSize + \" \" + defaults.iconSize).append(\"image\").attr(\"height\", defaults.iconSize).attr(\"width\", defaults.iconSize).attr(\"href\", \"icons/\" + nation + \".svg\");\n      });\n    }\n\n    function setupTeleportAreas() {\n      // Extract port coordinates\n      naTeleportPorts = defaults.portData // Use only ports that deep water ports and not a county capital\n      .filter(function (d) {\n        return !d.properties.shallow && !d.properties.countyCapital;\n      }) // Map to coordinates array\n      .map(function (d) {\n        return {\n          id: d.id,\n          coord: {\n            x: d.geometry.coordinates[0],\n            y: d.geometry.coordinates[1]\n          }\n        };\n      });\n      pathVoronoi = mainGVoronoi.selectAll(\".voronoi\").data(naTeleportPorts).enter().append(\"path\").attr(\"id\", function (d) {\n        return \"v\" + d.id;\n      });\n      naVoronoiDiagram = d3.voronoi().extent(defaults.coord.voronoi).x(function (d) {\n        return d.coord.x;\n      }).y(function (d) {\n        return d.coord.y;\n      })(naTeleportPorts); // Draw teleport areas\n\n      pathVoronoi.data(naVoronoiDiagram.polygons()).attr(\"d\", function (d) {\n        return d ? \"M\" + d.join(\"L\") + \"Z\" : null;\n      }).on(\"mouseover\", function () {\n        var ref = d3.mouse(this);\n        var mx = ref[0],\n            my = ref[1]; // use the new diagram.find() function to find the voronoi site closest to\n        // the mouse, limited by max distance defined by defaults.voronoiRadius\n\n        var site = naVoronoiDiagram.find(mx, my, defaults.voronoiRadius);\n\n        if (site) {\n          current.highlightId = site.data.id;\n          naVoronoiHighlight();\n        }\n      }).on(\"mouseout\", function () {\n        naVoronoiHighlight();\n      });\n      naToggleDisplayTeleportAreas();\n    }\n\n    function setupPBZones() {\n      mainGPBZone.append(\"path\").datum(defaults.PBZoneData).attr(\"class\", \"pb-zone\").attr(\"d\", d3.geoPath().pointRadius(4));\n      mainGPBZone.append(\"path\").datum(defaults.towerData).attr(\"class\", \"tower\").attr(\"d\", d3.geoPath().pointRadius(1.5));\n      mainGPBZone.append(\"path\").datum(defaults.fortData).attr(\"class\", \"fort\").attr(\"d\", d3.geoPath().pointRadius(2));\n    }\n\n    function setupSelects() {\n      function setupPortSelect() {\n        var portNames = $(\"#port-names\");\n        var selectPorts = defaults.portData.map(function (d) {\n          return {\n            coord: [d.geometry.coordinates[0], d.geometry.coordinates[1]],\n            name: d.properties.name\n          };\n        }).sort(function (a, b) {\n          if (a.name < b.name) {\n            return -1;\n          }\n\n          if (a.name > b.name) {\n            return 1;\n          }\n\n          return 0;\n        });\n        portNames.append($(\"<option>\", {\n          value: 0,\n          text: \"Select a port\"\n        }));\n        selectPorts.forEach(function (port) {\n          portNames.append($(\"<option>\", {\n            value: port.coord,\n            text: port.name\n          }));\n        });\n      }\n\n      function setupGoodSelect() {\n        var goodNames = $(\"#good-names\");\n        var selectGoods = new Map();\n        var goodsPerPort = defaults.portData.map(function (d) {\n          var goods = d.properties.drops;\n          goods += d.properties.produces ? \",\" + d.properties.produces : \"\";\n          return {\n            id: d.id,\n            goods: goods\n          };\n        });\n        goodsPerPort.forEach(function (port) {\n          port.goods.split(\",\").forEach(function (good) {\n            if (good) {\n              var ports = new Set(selectGoods.get(good)).add(port.id);\n              selectGoods.set(good, ports);\n            }\n          });\n        });\n        selectGoods = new Map(Array.from(selectGoods).sort());\n        goodNames.append($(\"<option>\", {\n          value: 0,\n          text: \"Select a good\"\n        }));\n\n        for (var _iterator = selectGoods.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref2;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref2 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref2 = _i.value;\n          }\n\n          var _ref3 = _ref2;\n          var _key = _ref3[0];\n          var _portIds = _ref3[1];\n          var ids = \"\";\n\n          for (var _iterator2 = _portIds, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n            var _ref4;\n\n            if (_isArray2) {\n              if (_i2 >= _iterator2.length) break;\n              _ref4 = _iterator2[_i2++];\n            } else {\n              _i2 = _iterator2.next();\n              if (_i2.done) break;\n              _ref4 = _i2.value;\n            }\n\n            var _id = _ref4;\n            ids += \",\" + _id;\n          }\n\n          goodNames.append($(\"<option>\", {\n            value: ids.substr(1),\n            text: _key\n          }));\n        }\n      }\n\n      function goToPort(coord) {\n        var c = coord.split(\",\"),\n            x = c[0],\n            y = c[1];\n        zoomAndPan(d3.zoomIdentity.translate(-x, -y).scale(1));\n      }\n\n      setupPortSelect();\n      $(\"#port-names\").change(function () {\n        goToPort($(\"#port-names\").val());\n      });\n      setupGoodSelect();\n      $(\"#good-names\").change(function () {\n        var portIds = $(\"#good-names\").val().split(\",\");\n\n        if (portIds.includes(\"0\")) {\n          current.portData = defaults.portData;\n        } else {\n          current.portData = defaults.portData.filter(function (d) {\n            return portIds.includes(d.id);\n          });\n        }\n\n        updatePorts();\n      });\n    }\n\n    setupScaleDomain();\n    setupCanvas();\n    setupSvg();\n    setupTeleportAreas();\n    setupPorts();\n    setupPBZones();\n    setupSelects();\n    __WEBPACK_IMPORTED_MODULE_1_moment___default.a.locale(\"en-gb\");\n  }\n\n  function predictWind(currentWind, predictTime) {\n    function compassToDegrees(compass) {\n      var degree = 360 / defaults.compassDirections.length;\n      return defaults.compassDirections.indexOf(compass) * degree;\n    }\n\n    function printPredictedWind(predictedWindDegrees, predictTime, currentWind, currentTime) {\n      function printWindLine(x, dx, y, dy, degrees) {\n        var compass = degreesToCompass(degrees);\n        current.lineData.push([x + dx / 2, y + dy / 2]);\n        current.lineData.push([x - dx / 2, y - dy / 2]);\n        gCompass.datum(current.lineData).attr(\"d\", defaults.line).attr(\"class\", \"wind\").attr(\"marker-end\", \"url(#arrow)\");\n        var rect = mainGCoord.append(\"rect\");\n        var svg = mainGCoord.append(\"svg\");\n        var text1 = svg.append(\"text\").attr(\"x\", \"50%\").attr(\"y\", \"33%\").attr(\"class\", \"wind-text\").text(\"From \" + compass + \" at \" + predictTime);\n        var text2 = svg.append(\"text\").attr(\"x\", \"50%\").attr(\"y\", \"66%\").attr(\"class\", \"wind-text-current\").text(\"Currently at \" + currentTime + \" from \" + currentWind);\n        var bbox1 = text1.node().getBoundingClientRect(),\n            bbox2 = text2.node().getBoundingClientRect(),\n            height = Math.max(bbox1.height, bbox2.height) * 2 + defaults.fontSize,\n            width = Math.max(bbox1.width, bbox2.width) + defaults.fontSize;\n        svg.attr(\"x\", x - width / 2).attr(\"y\", y + 20).attr(\"height\", height).attr(\"width\", width);\n        rect.attr(\"x\", x - width / 2).attr(\"y\", y - 20 - defaults.fontSize / 2).attr(\"height\", height + 40 + defaults.fontSize).attr(\"width\", width);\n      }\n\n      var targetScale = 4,\n          scale = targetScale / current.transform.scale,\n          x = -current.transform.x * scale,\n          xCompass = -current.transform.x / current.transform.scale - defaults.width / 25,\n          y = -current.transform.y * scale,\n          yCompass = -current.transform.y / current.transform.scale - defaults.height / 25,\n          length = 40,\n          radians = Math.PI / 180 * (predictedWindDegrees - 90),\n          dx = length * Math.cos(radians),\n          dy = length * Math.sin(radians);\n      clearMap();\n      plotCourse(xCompass, yCompass, \"wind\");\n      printWindLine(xCompass, dx, yCompass, dy, predictedWindDegrees);\n      zoomAndPan(d3.zoomIdentity.translate(-x, -y).scale(targetScale));\n    }\n\n    var secondsForFullCircle = 48 * 60,\n        fullCircle = 360,\n        degreesPerSecond = fullCircle / secondsForFullCircle;\n    var currentWindDegrees;\n    var regex = /(\\d+)[\\s:.](\\d+)/;\n    var match = regex.exec(predictTime),\n        predictHours = parseInt(match[1]),\n        predictMinutes = parseInt(match[2]); // Set current wind in degrees\n\n    if (isNaN(currentWind)) {\n      currentWindDegrees = compassToDegrees(currentWind);\n    } else {\n      currentWindDegrees = +currentWind;\n    }\n\n    var currentDate = __WEBPACK_IMPORTED_MODULE_1_moment___default()().utc().seconds(0).milliseconds(0),\n        predictDate = __WEBPACK_IMPORTED_MODULE_1_moment___default()(currentDate).hour(predictHours).minutes(predictMinutes);\n\n    if (predictDate.isBefore(currentDate)) {\n      predictDate.add(1, \"day\");\n    }\n\n    var timeDiffInSec = predictDate.diff(currentDate, \"seconds\");\n    var predictedWindDegrees = Math.abs(currentWindDegrees - degreesPerSecond * timeDiffInSec + 360) % 360; //console.log(`currentWind: ${currentWind} currentWindDegrees: ${currentWindDegrees}`);\n    //console.log(`   currentDate: ${currentDate.format()} predictDate: ${predictDate.format()}`);\n    //console.log(`   predictedWindDegrees: ${predictedWindDegrees} predictTime: ${predictTime}`);\n\n    printPredictedWind(predictedWindDegrees, predictDate.format(\"H.mm\"), currentWind, currentDate.format(\"H.mm\"));\n  }\n\n  function naReady(error, naMap, pbZones) {\n    if (error) {\n      throw error;\n    } // Read map data\n\n\n    defaults.portData = Object(__WEBPACK_IMPORTED_MODULE_0_topojson_client__[\"a\" /* feature */])(naMap, naMap.objects.ports).features;\n    current.portData = defaults.portData;\n    defaults.PBZoneData = Object(__WEBPACK_IMPORTED_MODULE_0_topojson_client__[\"a\" /* feature */])(pbZones, pbZones.objects.pbZones);\n    defaults.fortData = Object(__WEBPACK_IMPORTED_MODULE_0_topojson_client__[\"a\" /* feature */])(pbZones, pbZones.objects.forts);\n    defaults.towerData = Object(__WEBPACK_IMPORTED_MODULE_0_topojson_client__[\"a\" /* feature */])(pbZones, pbZones.objects.towers);\n    setup();\n    zoomAndPan(initial.transform); //updatePorts(current.portData.filter(d => [\"234\", \"237\", \"238\", \"239\", \"240\"].includes(d.id)));\n\n    updatePorts();\n    /*\n    let predictTime = moment().utc(),\n        direction = \"nne\".toUpperCase();\n    console.log(`---->   predictTime: ${predictTime.format()}`);\n    predictWind(direction, `${predictTime.hours()}:${predictTime.minutes()}`);\n    predictTime.add(48 / 4, \"minutes\");\n    console.log(`---->   predictTime: ${predictTime.format()}`);\n    predictWind(direction, `${predictTime.hours()}:${predictTime.minutes()}`);\n    */\n    // https://stackoverflow.com/questions/22581345/click-button-copy-to-clipboard-using-jquery\n\n    function copyF11ToClipboard(F11coord) {\n      console.log(\"F11coord: \" + F11coord);\n      var temp = $(\"<input>\");\n      $(\"body\").append(temp);\n      temp.val(F11coord).select();\n      document.execCommand(\"copy\");\n      temp.remove();\n    }\n\n    function pasteF11FromClipboard(event) {\n      function addF11StringToInput(F11String) {\n        console.log(\"addF11StringToInput F11String: \" + F11String);\n        var regex = /F11 coordinates X: ([-+]?[0-9]*\\.?[0-9]+) Z: ([-+]?[0-9]*\\.?[0-9]+)/g;\n        var match = regex.exec(F11String);\n        console.log(\"match[1]: \" + match[1] + \" match[2]: \" + match[2]);\n        $(\"#x-coord\").val(+match[1]).select();\n        $(\"#z-coord\").value = +match[2];\n      }\n\n      var F11String = document.execCommand(\"paste\");\n      console.log(\"pasteF11FromClipboard F11String: \" + F11String);\n      addF11StringToInput(F11String);\n    }\n\n    $(\"#copy-coord\").click(function () {\n      var x = $(\"#x-coord\").val(),\n          z = $(\"#z-coord\").val();\n\n      if (!Number.isNaN(z) && !Number.isNaN(z)) {\n        var F11String = \"F11 coordinates X: \" + x + \" Z: \" + z;\n        copyF11ToClipboard(F11String);\n      }\n    });\n    $(\"#paste-coord\").click(function (event) {\n      pasteF11FromClipboard(event);\n    });\n    $(\"#f11\").submit(function (event) {\n      var x = $(\"#x-coord\").val(),\n          z = $(\"#z-coord\").val();\n      goToF11(x, z);\n      event.preventDefault();\n    });\n    $(\"#direction\").knob({\n      bgColor: \"#ede1d2\",\n      // primary-200\n      thickness: 0.2,\n      min: 0,\n      max: 359,\n      step: 360 / defaults.compassDirections.length,\n      cursor: true,\n      fgColor: \"#917f68\",\n      // primary-700\n      draw: function draw() {\n        $(this.i).css(\"class\", \"knob\");\n      },\n      format: function format(input) {\n        return degreesToCompass(input);\n      }\n    });\n    $(\"#windPrediction\").submit(function (event) {\n      var currentWind = $(\"#direction\").val().toUpperCase(),\n          time = $(\"#time\").val();\n      predictWind(currentWind, time);\n      $(\"#predictDropdown\").dropdown(\"toggle\");\n      event.preventDefault();\n    });\n    $(\"#reset\").on(\"click\", function () {\n      clearMap();\n    });\n    $(\".radio-group\").change(function () {\n      current.radioButton = $(\"input[name='mouseFunction']:checked\").val();\n      clearMap();\n    });\n  }\n\n  d3.queue().defer(d3.json, defaults.mapJson).defer(d3.json, defaults.pbJson).await(naReady);\n}\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9uYS1kaXNwbGF5LmpzP2UwMjkiXSwibmFtZXMiOlsibmFEaXNwbGF5Iiwic2VydmVyTmFtZSIsIm5hU3ZnIiwibmFDYW52YXMiLCJuYUNvbnRleHQiLCJzdmdEZWYiLCJuYVpvb20iLCJtYWluR1BvcnQiLCJtYWluR1BCWm9uZSIsIm1haW5HVm9yb25vaSIsIm1haW5HQ29vcmQiLCJnQ29tcGFzcyIsIm5hVm9yb25vaURpYWdyYW0iLCJwYXRoVm9yb25vaSIsIm5hVGVsZXBvcnRQb3J0cyIsImdQb3J0cyIsImRlZmF1bHRzIiwibWFyZ2luIiwidG9wIiwicGFyc2VJbnQiLCIkIiwiY3NzIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiY29vcmQiLCJtaW4iLCJtYXgiLCJtYXhTY2FsZSIsImZvbnRTaXplIiwiY2lyY2xlU2l6ZSIsImljb25TaXplIiwiUEJab25lWm9vbVNjYWxlIiwibGFiZWxab29tU2NhbGUiLCJoaWdobGlnaHREdXJhdGlvbiIsIm1hcEpzb24iLCJwYkpzb24iLCJpbWFnZVNyYyIsImltYWdlIiwiSW1hZ2UiLCJsaW5lIiwiZDMiLCJ0cmFuc2Zvcm1NYXRyaXgiLCJBIiwiQiIsIkMiLCJEIiwidHJhbnNmb3JtTWF0cml4SW52IiwiY29tcGFzc0RpcmVjdGlvbnMiLCJ3aWR0aCIsImlubmVyV2lkdGgiLCJoZWlnaHQiLCJpbm5lckhlaWdodCIsIm1pblNjYWxlIiwiTWF0aCIsImluaXRpYWwiLCJzY2FsZSIsIngiLCJ5IiwidHJhbnNmb3JtIiwiem9vbUlkZW50aXR5IiwidHJhbnNsYXRlIiwieFNjYWxlIiwic2NhbGVMaW5lYXIiLCJjbGFtcCIsInJhbmdlIiwieVNjYWxlIiwidm9yb25vaSIsInZvcm9ub2lSYWRpdXMiLCJjdXJyZW50IiwiaGlnaGxpZ2h0SWQiLCJiUEJab25lRGlzcGxheWVkIiwiYlBvcnRMYWJlbERpc3BsYXllZCIsImJGaXJzdENvb3JkIiwicmFkaW9CdXR0b24iLCJsaW5lRGF0YSIsInRob3VzYW5kc1dpdGhCbGFua3MiLCJ0b1N0cmluZyIsInJlcGxhY2UiLCJmb3JtYXRDb29yZCIsInIiLCJhYnMiLCJ0cnVuYyIsImRlZ3JlZXNUb0NvbXBhc3MiLCJkZWdyZWVzIiwidmFsIiwiZmxvb3IiLCJuYURpc3BsYXlDb3VudHJpZXMiLCJkcmF3SW1hZ2UiLCJnZXRJbWFnZURhdGEiLCJzYXZlIiwiY2xlYXJSZWN0IiwiayIsInJlc3RvcmUiLCJkb3VibGVDbGlja0FjdGlvbiIsInByaW50Q29vcmQiLCJjb252ZXJ0SW52Q29vcmRYIiwiY29udmVydEludkNvb3JkWSIsIkYxMVgiLCJGMTFZIiwicHJpbnRGMTFDb29yZCIsInBsb3RDb3Vyc2UiLCJtb3VzZSIsInpvb21UcmFuc2Zvcm0iLCJteCIsIm15IiwidGsiLCJ0eCIsInR5Iiwiem9vbUFuZFBhbiIsInN0eWxlIiwicHJpbnRDb21wYXNzIiwiY29tcGFzc1NpemUiLCJhcHBlbmQiLCJhdHRyIiwicHJpbnRMaW5lIiwicm90YXRpb25BbmdsZUluRGVncmVlcyIsImNlbnRlclB0IiwidGFyZ2V0UHQiLCJyYWRpYW5zVG9EZWdyZWVzIiwicmFkaWFucyIsIlBJIiwidGhldGEiLCJhdGFuMiIsImFuZ2xlIiwibGVuZ3RoIiwiY29tcGFzcyIsImRhdHVtIiwic3ZnIiwicmVjdCIsInRleHQiLCJyb3VuZCIsImJib3giLCJub2RlIiwiZ2V0QkJveCIsInB1c2giLCJnb1RvRjExIiwiY29udmVydENvb3JkWCIsImNvbnZlcnRDb29yZFkiLCJjbGVhck1hcCIsInRleHRYIiwidGV4dFkiLCJnIiwibmFab29tZWQiLCJjb25maWd1cmVNYXAiLCJuYVRvZ2dsZVBCWm9uZXMiLCJhY3RpdmUiLCJuYVRvZ2dsZURpc3BsYXlUZWxlcG9ydEFyZWFzIiwidXBkYXRlUG9ydHMiLCJldmVudCIsInNlbGVjdEFsbCIsImQiLCJwcm9wZXJ0aWVzIiwiZHgiLCJkeSIsIm5hVm9yb25vaUhpZ2hsaWdodCIsIm5hVG9vbHRpcERhdGEiLCJoIiwibmF0aW9uIiwibmFtZSIsImF2YWlsYWJsZUZvckFsbCIsInNoYWxsb3ciLCJjb3VudHlDYXBpdGFsIiwiY2FwdHVyZXIiLCJtb21lbnQiLCJsYXN0UG9ydEJhdHRsZSIsImZyb21Ob3ciLCJub25DYXB0dXJhYmxlIiwicGJUaW1lUmFuZ2UiLCJwb3J0QmF0dGxlU3RhcnRUaW1lIiwiYnJMaW1pdCIsInBvcnRCYXR0bGVUeXBlIiwiY29ucXVlc3RNYXJrc1BlbnNpb24iLCJwb3J0VGF4IiwidHJhZGluZ0NvbXBhbnkiLCJsYWJvckhvdXJzRGlzY291bnQiLCJwcm9kdWNlcyIsImpvaW4iLCJkcm9wcyIsImNvbnN1bWVzIiwicG9ydE1vdXNlb3ZlciIsInNlbGVjdCIsImlkIiwidG9vbHRpcCIsImRlbGF5Iiwic2hvdyIsImhpZGUiLCJodG1sIiwicGxhY2VtZW50IiwiZGF0YSIsInBvcnREYXRhIiwibm9kZUdyb3Vwc0VudGVyIiwiZW50ZXIiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwibWVyZ2UiLCJvbiIsImYiLCJleGl0IiwicmVtb3ZlIiwidCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkdXJhdGlvbiIsInRyYW5zaXRpb24iLCJjYWxsIiwic3BsaWNlIiwiZ2V0Iiwic2VsZWN0ZWRJbmRleCIsInNldHVwIiwic3RvcFByb3AiLCJkZWZhdWx0UHJldmVudGVkIiwic3RvcFByb3BhZ2F0aW9uIiwic2V0dXBTY2FsZURvbWFpbiIsImZsYXR0ZW5BcnJheSIsImNvbmNhdCIsImFwcGx5IiwiYXJyIiwibWFwIiwiZWxlbWVudCIsImRvbWFpbiIsImV4dGVudCIsIlBCWm9uZURhdGEiLCJmZWF0dXJlcyIsImZvcnREYXRhIiwidG93ZXJEYXRhIiwic2V0dXBDYW52YXMiLCJnZXRDb250ZXh0Iiwib25sb2FkIiwic3JjIiwic2V0dXBTdmciLCJ6b29tUGFkZGluZyIsInpvb20iLCJzY2FsZUV4dGVudCIsInRyYW5zbGF0ZUV4dGVudCIsInNldHVwUG9ydHMiLCJuYXRpb25zIiwiZm9yRWFjaCIsInNldHVwVGVsZXBvcnRBcmVhcyIsImZpbHRlciIsInBvbHlnb25zIiwicmVmIiwic2l0ZSIsImZpbmQiLCJzZXR1cFBCWm9uZXMiLCJnZW9QYXRoIiwicG9pbnRSYWRpdXMiLCJzZXR1cFNlbGVjdHMiLCJzZXR1cFBvcnRTZWxlY3QiLCJwb3J0TmFtZXMiLCJzZWxlY3RQb3J0cyIsInNvcnQiLCJhIiwiYiIsInZhbHVlIiwicG9ydCIsInNldHVwR29vZFNlbGVjdCIsImdvb2ROYW1lcyIsInNlbGVjdEdvb2RzIiwiTWFwIiwiZ29vZHNQZXJQb3J0IiwiZ29vZHMiLCJzcGxpdCIsImdvb2QiLCJwb3J0cyIsIlNldCIsImFkZCIsInNldCIsIkFycmF5IiwiZnJvbSIsImVudHJpZXMiLCJrZXkiLCJwb3J0SWRzIiwiaWRzIiwic3Vic3RyIiwiZ29Ub1BvcnQiLCJjIiwiY2hhbmdlIiwiaW5jbHVkZXMiLCJsb2NhbGUiLCJwcmVkaWN0V2luZCIsImN1cnJlbnRXaW5kIiwicHJlZGljdFRpbWUiLCJjb21wYXNzVG9EZWdyZWVzIiwiZGVncmVlIiwiaW5kZXhPZiIsInByaW50UHJlZGljdGVkV2luZCIsInByZWRpY3RlZFdpbmREZWdyZWVzIiwiY3VycmVudFRpbWUiLCJwcmludFdpbmRMaW5lIiwidGV4dDEiLCJ0ZXh0MiIsImJib3gxIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYmJveDIiLCJ0YXJnZXRTY2FsZSIsInhDb21wYXNzIiwieUNvbXBhc3MiLCJjb3MiLCJzaW4iLCJzZWNvbmRzRm9yRnVsbENpcmNsZSIsImZ1bGxDaXJjbGUiLCJkZWdyZWVzUGVyU2Vjb25kIiwiY3VycmVudFdpbmREZWdyZWVzIiwicmVnZXgiLCJtYXRjaCIsImV4ZWMiLCJwcmVkaWN0SG91cnMiLCJwcmVkaWN0TWludXRlcyIsImlzTmFOIiwiY3VycmVudERhdGUiLCJ1dGMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwicHJlZGljdERhdGUiLCJob3VyIiwibWludXRlcyIsImlzQmVmb3JlIiwidGltZURpZmZJblNlYyIsImRpZmYiLCJmb3JtYXQiLCJuYVJlYWR5IiwiZXJyb3IiLCJuYU1hcCIsInBiWm9uZXMiLCJ0b3BvanNvbkZlYXR1cmUiLCJvYmplY3RzIiwiZm9ydHMiLCJ0b3dlcnMiLCJjb3B5RjExVG9DbGlwYm9hcmQiLCJGMTFjb29yZCIsImNvbnNvbGUiLCJsb2ciLCJ0ZW1wIiwiZG9jdW1lbnQiLCJleGVjQ29tbWFuZCIsInBhc3RlRjExRnJvbUNsaXBib2FyZCIsImFkZEYxMVN0cmluZ1RvSW5wdXQiLCJGMTFTdHJpbmciLCJjbGljayIsInoiLCJOdW1iZXIiLCJzdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsImtub2IiLCJiZ0NvbG9yIiwidGhpY2tuZXNzIiwic3RlcCIsImN1cnNvciIsImZnQ29sb3IiLCJkcmF3IiwiaSIsImlucHV0IiwidG9VcHBlckNhc2UiLCJ0aW1lIiwiZHJvcGRvd24iLCJxdWV1ZSIsImRlZmVyIiwianNvbiIsImF3YWl0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBOzs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVlLFNBQVNBLFNBQVQsQ0FBbUJDLFVBQW5CLEVBQStCO0FBQzFDLE1BQUlDLEtBQUosRUFBV0MsUUFBWCxFQUFxQkMsU0FBckIsRUFBZ0NDLE1BQWhDLEVBQXdDQyxNQUF4QztBQUNBLE1BQUlDLFNBQUosRUFDSUMsV0FESixFQUVJQyxZQUZKLEVBR0lDLFVBSEosRUFJSUMsUUFKSixFQUtJQyxnQkFMSixFQU1JQyxXQU5KLEVBT0lDLGVBUEosRUFRSUMsTUFSSjtBQVVBLE1BQUlDLFdBQVc7QUFDWEMsWUFBUTtBQUFFQyxXQUFLQyxTQUFTQyxFQUFFLFNBQUYsRUFBYUMsR0FBYixDQUFpQixRQUFqQixDQUFULENBQVA7QUFBNkNDLGFBQU8sRUFBcEQ7QUFBd0RDLGNBQVEsRUFBaEU7QUFBb0VDLFlBQU07QUFBMUUsS0FERztBQUVYQyxXQUFPO0FBQ0hDLFdBQUssQ0FERjtBQUVIQyxXQUFLO0FBRkYsS0FGSTtBQU1YQyxjQUFVLEVBTkM7QUFP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N08saUJBQWlCNlEsS0FBakIsQ0FBVDtBQUFBO0FBWFMsS0FBckI7QUFhQTVVLE1BQUUsaUJBQUYsRUFBcUJrVSxNQUFyQixDQUE0QixVQUFTak0sS0FBVCxFQUFnQjtBQUN4QyxVQUFNb0ksY0FBY3JRLEVBQUUsWUFBRixFQUNYaUUsR0FEVyxHQUVYNFEsV0FGVyxFQUFwQjtBQUFBLFVBR0lDLE9BQU85VSxFQUFFLE9BQUYsRUFBV2lFLEdBQVgsRUFIWDtBQUlBbU0sa0JBQVlDLFdBQVosRUFBeUJ5RSxJQUF6QjtBQUNBOVUsUUFBRSxrQkFBRixFQUFzQitVLFFBQXRCLENBQStCLFFBQS9CO0FBQ0E5TSxZQUFNa00sY0FBTjtBQUNILEtBUkQ7QUFTQW5VLE1BQUUsUUFBRixFQUFZZ0wsRUFBWixDQUFlLE9BQWYsRUFBd0IsWUFBVztBQUMvQnpEO0FBQ0gsS0FGRDtBQUdBdkgsTUFBRSxjQUFGLEVBQWtCaVEsTUFBbEIsQ0FBeUIsWUFBVztBQUNoQ2hOLGNBQVFLLFdBQVIsR0FBc0J0RCxFQUFFLHFDQUFGLEVBQXlDaUUsR0FBekMsRUFBdEI7QUFDQXNEO0FBQ0gsS0FIRDtBQUlIOztBQUVEbEcsS0FDSzJULEtBREwsR0FFS0MsS0FGTCxDQUVXNVQsR0FBRzZULElBRmQsRUFFb0J0VixTQUFTbUIsT0FGN0IsRUFHS2tVLEtBSEwsQ0FHVzVULEdBQUc2VCxJQUhkLEVBR29CdFYsU0FBU29CLE1BSDdCLEVBSUttVSxLQUpMLENBSVd0QyxPQUpYO0FBS0gsQyIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gRHJhd3MgdGVsZXBvcnQgbWFwIGZvciBOYXZhbCBBY3Rpb25cblxuIGlCIDIwMTdcbiAqL1xuXG5pbXBvcnQgeyBmZWF0dXJlIGFzIHRvcG9qc29uRmVhdHVyZSB9IGZyb20gXCJ0b3BvanNvbi1jbGllbnRcIjtcbmltcG9ydCBtb21lbnQgZnJvbSBcIm1vbWVudFwiO1xuaW1wb3J0IFwibW9tZW50L2xvY2FsZS9lbi1nYlwiO1xuaW1wb3J0IFwianF1ZXJ5LWtub2JcIjtcblxuaW1wb3J0IFwiYm9vdHN0cmFwL2pzL2Rpc3QvdG9vbHRpcFwiO1xuaW1wb3J0IFwiYm9vdHN0cmFwL2pzL2Rpc3QvdXRpbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuYURpc3BsYXkoc2VydmVyTmFtZSkge1xuICAgIGxldCBuYVN2ZywgbmFDYW52YXMsIG5hQ29udGV4dCwgc3ZnRGVmLCBuYVpvb207XG4gICAgbGV0IG1haW5HUG9ydCxcbiAgICAgICAgbWFpbkdQQlpvbmUsXG4gICAgICAgIG1haW5HVm9yb25vaSxcbiAgICAgICAgbWFpbkdDb29yZCxcbiAgICAgICAgZ0NvbXBhc3MsXG4gICAgICAgIG5hVm9yb25vaURpYWdyYW0sXG4gICAgICAgIHBhdGhWb3Jvbm9pLFxuICAgICAgICBuYVRlbGVwb3J0UG9ydHMsXG4gICAgICAgIGdQb3J0cztcblxuICAgIGxldCBkZWZhdWx0cyA9IHtcbiAgICAgICAgbWFyZ2luOiB7IHRvcDogcGFyc2VJbnQoJChcIi5uYXZiYXJcIikuY3NzKFwiaGVpZ2h0XCIpKSwgcmlnaHQ6IDIwLCBib3R0b206IDIwLCBsZWZ0OiAyMCB9LFxuICAgICAgICBjb29yZDoge1xuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiA4MTkyXG4gICAgICAgIH0sXG4gICAgICAgIG1heFNjYWxlOiAxMCxcbiAgICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgICBjaXJjbGVTaXplOiAxMCxcbiAgICAgICAgaWNvblNpemU6IDUwLFxuICAgICAgICBQQlpvbmVab29tU2NhbGU6IDEuNSxcbiAgICAgICAgbGFiZWxab29tU2NhbGU6IDAuNSxcbiAgICAgICAgaGlnaGxpZ2h0RHVyYXRpb246IDIwMCxcbiAgICAgICAgbWFwSnNvbjogYCR7c2VydmVyTmFtZX0uanNvbmAsXG4gICAgICAgIHBiSnNvbjogXCJwYi5qc29uXCIsXG4gICAgICAgIGltYWdlU3JjOiBcImltYWdlcy9uYS1tYXAuanBnXCIsXG4gICAgICAgIGltYWdlOiBuZXcgSW1hZ2UoKSxcbiAgICAgICAgbGluZTogZDMubGluZSgpLFxuICAgICAgICB0cmFuc2Zvcm1NYXRyaXg6IHtcbiAgICAgICAgICAgIEE6IC0wLjAwNDk5ODY2Nzc5MzYzODI4LFxuICAgICAgICAgICAgQjogLTAuMDAwMDAwMjE0NjQyNTQ5ODA2NDUsXG4gICAgICAgICAgICBDOiA0MDk2Ljg4NjM1MTUxODk3LFxuICAgICAgICAgICAgRDogNDA5Ni45MDI4Mjc4NzQ2OVxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2Zvcm1NYXRyaXhJbnY6IHtcbiAgICAgICAgICAgIEE6IC0yMDAuMDUzMzAyMDg3NTc3LFxuICAgICAgICAgICAgQjogLTAuMDA4NTkwMjc4OTc2MzYwMTEsXG4gICAgICAgICAgICBDOiA4MTk2MzAuODM2NDM3MTI2LFxuICAgICAgICAgICAgRDogLTgxOTU2My43NDU2NTE1NzFcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGFzc0RpcmVjdGlvbnM6IFtcbiAgICAgICAgICAgIFwiTlwiLFxuICAgICAgICAgICAgXCJOTkVcIixcbiAgICAgICAgICAgIFwiTkVcIixcbiAgICAgICAgICAgIFwiRU5FXCIsXG4gICAgICAgICAgICBcIkVcIixcbiAgICAgICAgICAgIFwiRVNFXCIsXG4gICAgICAgICAgICBcIlNFXCIsXG4gICAgICAgICAgICBcIlNTRVwiLFxuICAgICAgICAgICAgXCJTXCIsXG4gICAgICAgICAgICBcIlNTV1wiLFxuICAgICAgICAgICAgXCJTV1wiLFxuICAgICAgICAgICAgXCJXU1dcIixcbiAgICAgICAgICAgIFwiV1wiLFxuICAgICAgICAgICAgXCJXTldcIixcbiAgICAgICAgICAgIFwiTldcIixcbiAgICAgICAgICAgIFwiTk5XXCJcbiAgICAgICAgXVxuICAgIH07XG4gICAgZGVmYXVsdHMud2lkdGggPSB0b3AuaW5uZXJXaWR0aCAtIGRlZmF1bHRzLm1hcmdpbi5sZWZ0IC0gZGVmYXVsdHMubWFyZ2luLnJpZ2h0O1xuICAgIGRlZmF1bHRzLmhlaWdodCA9IHRvcC5pbm5lckhlaWdodCAtIGRlZmF1bHRzLm1hcmdpbi50b3AgLSBkZWZhdWx0cy5tYXJnaW4uYm90dG9tO1xuICAgIGRlZmF1bHRzLm1pblNjYWxlID0gTWF0aC5taW4oZGVmYXVsdHMud2lkdGggLyBkZWZhdWx0cy5jb29yZC5tYXgsIGRlZmF1bHRzLmhlaWdodCAvIGRlZmF1bHRzLmNvb3JkLm1heCk7XG4gICAgbGV0IGluaXRpYWwgPSB7XG4gICAgICAgIHNjYWxlOiBkZWZhdWx0cy5taW5TY2FsZSxcbiAgICAgICAgeDogLWRlZmF1bHRzLmNvb3JkLm1heCAvIDIgKiBkZWZhdWx0cy5taW5TY2FsZSxcbiAgICAgICAgeTogLWRlZmF1bHRzLmNvb3JkLm1heCAvIDIgKiBkZWZhdWx0cy5taW5TY2FsZVxuICAgIH07XG4gICAgaW5pdGlhbC50cmFuc2Zvcm0gPSBkMy56b29tSWRlbnRpdHkudHJhbnNsYXRlKGluaXRpYWwueCwgaW5pdGlhbC55KS5zY2FsZShpbml0aWFsLnNjYWxlKTtcbiAgICBkZWZhdWx0cy54U2NhbGUgPSBkM1xuICAgICAgICAuc2NhbGVMaW5lYXIoKVxuICAgICAgICAuY2xhbXAodHJ1ZSlcbiAgICAgICAgLnJhbmdlKFswLCBkZWZhdWx0cy53aWR0aF0pO1xuICAgIGRlZmF1bHRzLnlTY2FsZSA9IGQzXG4gICAgICAgIC5zY2FsZUxpbmVhcigpXG4gICAgICAgIC5jbGFtcCh0cnVlKVxuICAgICAgICAucmFuZ2UoWzAsIGRlZmF1bHRzLmhlaWdodF0pO1xuICAgIGRlZmF1bHRzLmNvb3JkLnZvcm9ub2kgPSBbXG4gICAgICAgIFtkZWZhdWx0cy5jb29yZC5taW4gLSAxLCBkZWZhdWx0cy5jb29yZC5taW4gLSAxXSxcbiAgICAgICAgW2RlZmF1bHRzLmNvb3JkLm1heCArIDEsIGRlZmF1bHRzLmNvb3JkLm1heCArIDFdXG4gICAgXTtcbiAgICAvLyBsaW1pdCBob3cgZmFyIGF3YXkgdGhlIG1vdXNlIGNhbiBiZSBmcm9tIGZpbmRpbmcgYSB2b3Jvbm9pIHNpdGVcbiAgICBkZWZhdWx0cy52b3Jvbm9pUmFkaXVzID0gTWF0aC5taW4oZGVmYXVsdHMuaGVpZ2h0LCBkZWZhdWx0cy53aWR0aCk7XG5cbiAgICBsZXQgY3VycmVudCA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiB7IHg6IGluaXRpYWwueCwgeTogaW5pdGlhbC55LCBzY2FsZTogaW5pdGlhbC5zY2FsZSB9LFxuICAgICAgICBmb250U2l6ZTogZGVmYXVsdHMuZm9udFNpemUsXG4gICAgICAgIGNpcmNsZVNpemU6IGRlZmF1bHRzLmNpcmNsZVNpemUsXG4gICAgICAgIGhpZ2hsaWdodElkOiBudWxsLFxuICAgICAgICBiUEJab25lRGlzcGxheWVkOiBmYWxzZSxcbiAgICAgICAgYlBvcnRMYWJlbERpc3BsYXllZDogdHJ1ZSxcbiAgICAgICAgYkZpcnN0Q29vcmQ6IHRydWUsXG4gICAgICAgIHJhZGlvQnV0dG9uOiBcImNvbXBhc3NcIixcbiAgICAgICAgbGluZURhdGE6IFtdXG4gICAgfTtcblxuICAgIGNvbnN0IHRob3VzYW5kc1dpdGhCbGFua3MgPSB4ID0+IHtcbiAgICAgICAgcmV0dXJuIHgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIlxcdTIwMDlcIik7XG4gICAgfTtcblxuICAgIGNvbnN0IGZvcm1hdENvb3JkID0geCA9PiB7XG4gICAgICAgIGxldCByID0gdGhvdXNhbmRzV2l0aEJsYW5rcyhNYXRoLmFicyhNYXRoLnRydW5jKHgpKSk7XG4gICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgciA9IGBcXHUyMjEyXFx1MjAwOSR7cn1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83NDkwNjYwL2NvbnZlcnRpbmctd2luZC1kaXJlY3Rpb24taW4tYW5nbGVzLXRvLXRleHQtd29yZHNcbiAgICBmdW5jdGlvbiBkZWdyZWVzVG9Db21wYXNzKGRlZ3JlZXMpIHtcbiAgICAgICAgY29uc3QgdmFsID0gTWF0aC5mbG9vcihkZWdyZWVzIC8gMjIuNSArIDAuNSk7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cy5jb21wYXNzRGlyZWN0aW9uc1t2YWwgJSAxNl07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmFEaXNwbGF5Q291bnRyaWVzKHRyYW5zZm9ybSkge1xuICAgICAgICBmdW5jdGlvbiBkcmF3SW1hZ2UoKSB7XG4gICAgICAgICAgICBuYUNvbnRleHQuZHJhd0ltYWdlKGRlZmF1bHRzLmltYWdlLCAwLCAwKTtcbiAgICAgICAgICAgIG5hQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgZGVmYXVsdHMud2lkdGgsIGRlZmF1bHRzLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBuYUNvbnRleHQuc2F2ZSgpO1xuICAgICAgICBuYUNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGRlZmF1bHRzLndpZHRoLCBkZWZhdWx0cy5oZWlnaHQpO1xuICAgICAgICBuYUNvbnRleHQudHJhbnNsYXRlKHRyYW5zZm9ybS54LCB0cmFuc2Zvcm0ueSk7XG4gICAgICAgIG5hQ29udGV4dC5zY2FsZSh0cmFuc2Zvcm0uaywgdHJhbnNmb3JtLmspO1xuICAgICAgICBkcmF3SW1hZ2UoKTtcbiAgICAgICAgbmFDb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkb3VibGVDbGlja0FjdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gcHJpbnRDb29yZCh4LCB5KSB7XG4gICAgICAgICAgICAvLyBzdmcgY29vcmQgdG8gRjExIGNvb3JkXG4gICAgICAgICAgICBmdW5jdGlvbiBjb252ZXJ0SW52Q29vcmRYKHgsIHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0cy50cmFuc2Zvcm1NYXRyaXhJbnYuQSAqIHggK1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0cy50cmFuc2Zvcm1NYXRyaXhJbnYuQiAqIHkgK1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0cy50cmFuc2Zvcm1NYXRyaXhJbnYuQ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHN2ZyBjb29yZCB0byBGMTEgY29vcmRcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRJbnZDb29yZFkoeCwgeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLnRyYW5zZm9ybU1hdHJpeEludi5CICogeCAtXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLnRyYW5zZm9ybU1hdHJpeEludi5BICogeSArXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLnRyYW5zZm9ybU1hdHJpeEludi5EXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgRjExWCA9IGNvbnZlcnRJbnZDb29yZFgoeCwgeSkgKiAtMSxcbiAgICAgICAgICAgICAgICBGMTFZID0gY29udmVydEludkNvb3JkWSh4LCB5KSAqIC0xO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudC5yYWRpb0J1dHRvbiA9PT0gXCJGMTFcIikge1xuICAgICAgICAgICAgICAgIHByaW50RjExQ29vcmQoeCwgeSwgRjExWCwgRjExWSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBsb3RDb3Vyc2UoeCwgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb29yZCA9IGQzLm1vdXNlKHRoaXMpLFxuICAgICAgICAgICAgdHJhbnNmb3JtID0gZDMuem9vbVRyYW5zZm9ybSh0aGlzKTtcbiAgICAgICAgY29uc3QgbXggPSBjb29yZFswXSxcbiAgICAgICAgICAgIG15ID0gY29vcmRbMV0sXG4gICAgICAgICAgICB0ayA9IHRyYW5zZm9ybS5rLFxuICAgICAgICAgICAgdHggPSB0cmFuc2Zvcm0ueCxcbiAgICAgICAgICAgIHR5ID0gdHJhbnNmb3JtLnk7XG5cbiAgICAgICAgbGV0IHggPSAobXggLSB0eCkgLyB0ayxcbiAgICAgICAgICAgIHkgPSAobXkgLSB0eSkgLyB0aztcblxuICAgICAgICBpZiAoY3VycmVudC5yYWRpb0J1dHRvbiA9PT0gXCJGMTFcIikge1xuICAgICAgICAgICAgcHJpbnRDb29yZCh4LCB5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsb3RDb3Vyc2UoeCwgeSk7XG4gICAgICAgIH1cblxuICAgICAgICB6b29tQW5kUGFuKGQzLnpvb21JZGVudGl0eS50cmFuc2xhdGUoLXgsIC15KS5zY2FsZSgxKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGxvdENvdXJzZSh4LCB5LCBzdHlsZSA9IFwiY291cnNlXCIpIHtcbiAgICAgICAgZnVuY3Rpb24gcHJpbnRDb21wYXNzKHgsIHksIHN0eWxlKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wYXNzU2l6ZSA9IFwiY291cnNlXCIgPT09IHN0eWxlID8gMTAwIDogMzA7XG5cbiAgICAgICAgICAgIG1haW5HQ29vcmRcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwiaW1hZ2VcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29tcGFzc1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCB4KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCB5KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHstY29tcGFzc1NpemUgLyAyfSwkey1jb21wYXNzU2l6ZSAvIDJ9KWApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY29tcGFzc1NpemUpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjb21wYXNzU2l6ZSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInhsaW5rOmhyZWZcIiwgXCJpY29ucy9jb21wYXNzLnN2Z1wiKTtcbiAgICAgICAgICAgIGdDb21wYXNzID0gbWFpbkdDb29yZC5hcHBlbmQoXCJwYXRoXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcHJpbnRMaW5lKHgsIHkpIHtcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzk5NzAyODEvamF2YS1jYWxjdWxhdGluZy10aGUtYW5nbGUtYmV0d2Vlbi10d28tcG9pbnRzLWluLWRlZ3JlZXNcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJvdGF0aW9uQW5nbGVJbkRlZ3JlZXMoY2VudGVyUHQsIHRhcmdldFB0KSB7XG4gICAgICAgICAgICAgICAgLy8gQ29udmVydHMgZnJvbSByYWRpYW5zIHRvIGRlZ3JlZXNcbiAgICAgICAgICAgICAgICAvLyBodHRwOi8vY3dlc3RibG9nLmNvbS8yMDEyLzExLzEyL2phdmFzY3JpcHQtZGVncmVlLWFuZC1yYWRpYW4tY29udmVyc2lvbi9cbiAgICAgICAgICAgICAgICBNYXRoLnJhZGlhbnNUb0RlZ3JlZXMgPSBmdW5jdGlvbihyYWRpYW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByYWRpYW5zICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgbGV0IHRoZXRhID0gTWF0aC5hdGFuMih0YXJnZXRQdFsxXSAtIGNlbnRlclB0WzFdLCB0YXJnZXRQdFswXSAtIGNlbnRlclB0WzBdKTtcbiAgICAgICAgICAgICAgICB0aGV0YSAtPSBNYXRoLlBJIC8gMi4wO1xuICAgICAgICAgICAgICAgIGxldCBhbmdsZSA9IE1hdGgucmFkaWFuc1RvRGVncmVlcyh0aGV0YSk7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ2xlIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBhbmdsZSArPSAzNjA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhbmdsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZGVncmVlcyA9IHJvdGF0aW9uQW5nbGVJbkRlZ3JlZXMoXG4gICAgICAgICAgICAgICAgY3VycmVudC5saW5lRGF0YVtjdXJyZW50LmxpbmVEYXRhLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgICAgIGN1cnJlbnQubGluZURhdGFbY3VycmVudC5saW5lRGF0YS5sZW5ndGggLSAyXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBhc3MgPSBkZWdyZWVzVG9Db21wYXNzKGRlZ3JlZXMpO1xuICAgICAgICAgICAgZ0NvbXBhc3MuZGF0dW0oY3VycmVudC5saW5lRGF0YSkuYXR0cihcImRcIiwgZGVmYXVsdHMubGluZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHN2ZyA9IG1haW5HQ29vcmRcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwic3ZnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHgpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHkpO1xuICAgICAgICAgICAgY29uc3QgcmVjdCA9IHN2Zy5hcHBlbmQoXCJyZWN0XCIpO1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IHN2Z1xuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIFwiNTAlXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIFwiNTAlXCIpXG4gICAgICAgICAgICAgICAgLnRleHQoYCR7Y29tcGFzc30gKCR7TWF0aC5yb3VuZChkZWdyZWVzKX3CsClgKTtcblxuICAgICAgICAgICAgY29uc3QgYmJveCA9IHRleHQubm9kZSgpLmdldEJCb3goKTtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGJib3guaGVpZ2h0ICsgZGVmYXVsdHMuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgd2lkdGggPSBiYm94LndpZHRoICsgZGVmYXVsdHMuZm9udFNpemU7XG4gICAgICAgICAgICByZWN0XG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpO1xuICAgICAgICAgICAgc3ZnLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KS5hdHRyKFwid2lkdGhcIiwgd2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudC5saW5lRGF0YS5wdXNoKFt4LCB5XSk7XG4gICAgICAgIGlmIChjdXJyZW50LmJGaXJzdENvb3JkKSB7XG4gICAgICAgICAgICBwcmludENvbXBhc3MoeCwgeSwgc3R5bGUpO1xuICAgICAgICAgICAgY3VycmVudC5iRmlyc3RDb29yZCA9ICFjdXJyZW50LmJGaXJzdENvb3JkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJpbnRMaW5lKHgsIHkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ29Ub0YxMShGMTFYLCBGMTFZKSB7XG4gICAgICAgIC8vIEYxMSBjb29yZCB0byBzdmcgY29vcmRcbiAgICAgICAgZnVuY3Rpb24gY29udmVydENvb3JkWCh4LCB5KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdHMudHJhbnNmb3JtTWF0cml4LkEgKiB4ICsgZGVmYXVsdHMudHJhbnNmb3JtTWF0cml4LkIgKiB5ICsgZGVmYXVsdHMudHJhbnNmb3JtTWF0cml4LkM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRjExIGNvb3JkIHRvIHN2ZyBjb29yZFxuICAgICAgICBmdW5jdGlvbiBjb252ZXJ0Q29vcmRZKHgsIHkpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0cy50cmFuc2Zvcm1NYXRyaXguQiAqIHggLSBkZWZhdWx0cy50cmFuc2Zvcm1NYXRyaXguQSAqIHkgKyBkZWZhdWx0cy50cmFuc2Zvcm1NYXRyaXguRDtcbiAgICAgICAgfVxuICAgICAgICBGMTFYID0gK0YxMVggKiAtMTtcbiAgICAgICAgRjExWSA9ICtGMTFZICogLTE7XG4gICAgICAgIGNvbnN0IHggPSBjb252ZXJ0Q29vcmRYKEYxMVgsIEYxMVkpLFxuICAgICAgICAgICAgeSA9IGNvbnZlcnRDb29yZFkoRjExWCwgRjExWSk7XG5cbiAgICAgICAgY2xlYXJNYXAoKTtcbiAgICAgICAgaWYgKGN1cnJlbnQucmFkaW9CdXR0b24gPT09IFwiRjExXCIpIHtcbiAgICAgICAgICAgIHByaW50RjExQ29vcmQoeCwgeSwgRjExWCwgRjExWSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwbG90Q291cnNlKHgsIHkpO1xuICAgICAgICB9XG4gICAgICAgIHpvb21BbmRQYW4oZDMuem9vbUlkZW50aXR5LnRyYW5zbGF0ZSgteCwgLXkpLnNjYWxlKDEpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmludEYxMUNvb3JkKHgsIHksIHRleHRYLCB0ZXh0WSkge1xuICAgICAgICBsZXQgZyA9IG1haW5HQ29vcmQuYXBwZW5kKFwiZ1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt4fSwke3l9KWApO1xuICAgICAgICBnLmFwcGVuZChcImNpcmNsZVwiKS5hdHRyKFwiclwiLCAyMCk7XG4gICAgICAgIGdcbiAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImR4XCIsIFwiLTEuNWVtXCIpXG4gICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLS41ZW1cIilcbiAgICAgICAgICAgIC50ZXh0KGZvcm1hdENvb3JkKHRleHRYKSk7XG4gICAgICAgIGdcbiAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImR4XCIsIFwiLTEuNWVtXCIpXG4gICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjVlbVwiKVxuICAgICAgICAgICAgLnRleHQoZm9ybWF0Q29vcmQodGV4dFkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuYVpvb21lZCgpIHtcbiAgICAgICAgZnVuY3Rpb24gY29uZmlndXJlTWFwKHNjYWxlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBuYVRvZ2dsZVBCWm9uZXMoKSB7XG4gICAgICAgICAgICAgICAgbWFpbkdQQlpvbmUuc3R5bGUoXCJkaXNwbGF5XCIsIG1haW5HUEJab25lLmFjdGl2ZSA/IFwibm9uZVwiIDogXCJpbmhlcml0XCIpO1xuICAgICAgICAgICAgICAgIG1haW5HUEJab25lLmFjdGl2ZSA9ICFtYWluR1BCWm9uZS5hY3RpdmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZWZhdWx0cy5QQlpvbmVab29tU2NhbGUgPCBzY2FsZSkge1xuICAgICAgICAgICAgICAgIGlmICghY3VycmVudC5iUEJab25lRGlzcGxheWVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hVG9nZ2xlUEJab25lcygpO1xuICAgICAgICAgICAgICAgICAgICBuYVRvZ2dsZURpc3BsYXlUZWxlcG9ydEFyZWFzKCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuaGlnaGxpZ2h0SWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmJQQlpvbmVEaXNwbGF5ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuYlBCWm9uZURpc3BsYXllZCkge1xuICAgICAgICAgICAgICAgICAgICBuYVRvZ2dsZVBCWm9uZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgbmFUb2dnbGVEaXNwbGF5VGVsZXBvcnRBcmVhcygpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmJQQlpvbmVEaXNwbGF5ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZWZhdWx0cy5sYWJlbFpvb21TY2FsZSA+IHNjYWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuYlBvcnRMYWJlbERpc3BsYXllZCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmJQb3J0TGFiZWxEaXNwbGF5ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghY3VycmVudC5iUG9ydExhYmVsRGlzcGxheWVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYlBvcnRMYWJlbERpc3BsYXllZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlUG9ydHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0cmFuc2Zvcm0gPSBkMy5ldmVudC50cmFuc2Zvcm07XG4gICAgICAgIC8vY29uc29sZS5sb2coYHRyYW5zZm9ybTogJHtKU09OLnN0cmluZ2lmeSh0cmFuc2Zvcm0pfWApO1xuXG4gICAgICAgIGNvbmZpZ3VyZU1hcCh0cmFuc2Zvcm0uayk7XG4gICAgICAgIG5hRGlzcGxheUNvdW50cmllcyh0cmFuc2Zvcm0pO1xuXG4gICAgICAgIG1haW5HUG9ydC5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSk7XG4gICAgICAgIG1haW5HVm9yb25vaS5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSk7XG4gICAgICAgIG1haW5HUEJab25lLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtKTtcbiAgICAgICAgbWFpbkdDb29yZC5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSk7XG5cbiAgICAgICAgY3VycmVudC5jaXJjbGVTaXplID0gZGVmYXVsdHMuY2lyY2xlU2l6ZSAvIHRyYW5zZm9ybS5rO1xuICAgICAgICBtYWluR1BvcnQuc2VsZWN0QWxsKFwiY2lyY2xlXCIpLmF0dHIoXCJyXCIsIGN1cnJlbnQuY2lyY2xlU2l6ZSk7XG4gICAgICAgIG1haW5HUG9ydFxuICAgICAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZHhcIiwgZCA9PiBkLnByb3BlcnRpZXMuZHggLyB0cmFuc2Zvcm0uaylcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgZCA9PiBkLnByb3BlcnRpZXMuZHkgLyB0cmFuc2Zvcm0uayk7XG4gICAgICAgIGlmIChjdXJyZW50LmJQb3J0TGFiZWxEaXNwbGF5ZWQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQuZm9udFNpemUgPSBkZWZhdWx0cy5mb250U2l6ZSAvIHRyYW5zZm9ybS5rO1xuICAgICAgICAgICAgbWFpbkdQb3J0LnNlbGVjdEFsbChcInRleHRcIikuc3R5bGUoXCJmb250LXNpemVcIiwgY3VycmVudC5mb250U2l6ZSk7XG4gICAgICAgICAgICBpZiAoY3VycmVudC5oaWdobGlnaHRJZCAmJiAhY3VycmVudC5iUEJab25lRGlzcGxheWVkKSB7XG4gICAgICAgICAgICAgICAgbmFWb3Jvbm9pSGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQb3J0cygpIHtcbiAgICAgICAgZnVuY3Rpb24gbmFUb29sdGlwRGF0YShkKSB7XG4gICAgICAgICAgICBsZXQgaCA9IGA8dGFibGU+PHRib2R5PHRyPjx0ZD48aSBjbGFzcz0nZmxhZy1pY29uICR7ZC5uYXRpb259Jz48L2k+PC90ZD5gO1xuICAgICAgICAgICAgaCArPSBgPHRkPjxzcGFuIGNsYXNzPSdwb3J0LW5hbWUnPiR7ZC5uYW1lfTwvc3Bhbj5gO1xuICAgICAgICAgICAgaCArPSBkLmF2YWlsYWJsZUZvckFsbCA/IFwiIChhY2Nlc3NpYmxlIHRvIGFsbCBuYXRpb25zKVwiIDogXCJcIjtcbiAgICAgICAgICAgIGggKz0gXCI8L3RkPjwvdHI+PC90Ym9keT48L3RhYmxlPlwiO1xuICAgICAgICAgICAgaCArPSBgPHA+JHtkLnNoYWxsb3cgPyBcIlNoYWxsb3dcIiA6IFwiRGVlcFwifWA7XG4gICAgICAgICAgICBoICs9IFwiIHdhdGVyIHBvcnRcIjtcbiAgICAgICAgICAgIGlmIChkLmNvdW50eUNhcGl0YWwpIHtcbiAgICAgICAgICAgICAgICBoICs9IFwiIChjb3VudHkgY2FwaXRhbClcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmNhcHR1cmVyKSB7XG4gICAgICAgICAgICAgICAgaCArPSBgIGNhcHR1cmVkIGJ5ICR7ZC5jYXB0dXJlcn0gJHttb21lbnQoZC5sYXN0UG9ydEJhdHRsZSkuZnJvbU5vdygpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoICs9IFwiPGJyPlwiO1xuICAgICAgICAgICAgaWYgKCFkLm5vbkNhcHR1cmFibGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYlRpbWVSYW5nZSA9ICFkLnBvcnRCYXR0bGVTdGFydFRpbWVcbiAgICAgICAgICAgICAgICAgICAgPyBcIjExLjAwXFx1MjAwOeKAk1xcdTIwMDk4LjAwXCJcbiAgICAgICAgICAgICAgICAgICAgOiBgJHsoZC5wb3J0QmF0dGxlU3RhcnRUaW1lICsgMTApICUgMjR9LjAwXFx1MjAwOeKAk1xcdTIwMDkkeyhkLnBvcnRCYXR0bGVTdGFydFRpbWUgKyAxMykgJSAyNH0uMDBgO1xuICAgICAgICAgICAgICAgIGggKz0gYFBvcnQgYmF0dGxlOiAke3BiVGltZVJhbmdlfSwgJHt0aG91c2FuZHNXaXRoQmxhbmtzKGQuYnJMaW1pdCl9IEJSLCBgO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZC5wb3J0QmF0dGxlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTGFyZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGggKz0gXCIxPHN1cD5zdDwvc3VwPlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNZWRpdW1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGggKz0gXCI0PHN1cD50aDwvc3VwPlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJTbWFsbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaCArPSBcIjY8c3VwPnRoPC9zdXA+XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBoICs9IFwiIHJhdGUgQUlcIjtcbiAgICAgICAgICAgICAgICBoICs9IGAsICR7ZC5jb25xdWVzdE1hcmtzUGVuc2lvbn0gY29ucXVlc3QgcG9pbnRgO1xuICAgICAgICAgICAgICAgIGggKz0gZC5jb25xdWVzdE1hcmtzUGVuc2lvbiA+IDEgPyBcInNcIiA6IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGggKz0gXCJOb3QgY2FwdHVyYWJsZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaCArPSBgPGJyPiR7ZC5wb3J0VGF4ICogMTAwfVxcdTIwMDklIHBvcnQgdGF4YDtcbiAgICAgICAgICAgIGggKz0gZC50cmFkaW5nQ29tcGFueSA/IGAsIHRyYWRpbmcgY29tcGFueSBsZXZlbCAke2QudHJhZGluZ0NvbXBhbnl9YCA6IFwiXCI7XG4gICAgICAgICAgICBoICs9IGQubGFib3JIb3Vyc0Rpc2NvdW50ID8gXCIsIGxhYm9yIGhvdXJzIGRpc2NvdW50XCIgOiBcIlwiO1xuICAgICAgICAgICAgaCArPSBcIjwvcD5cIjtcbiAgICAgICAgICAgIGggKz0gXCI8dGFibGUgY2xhc3M9J3RhYmxlIHRhYmxlLXNtJz5cIjtcbiAgICAgICAgICAgIGlmIChkLnByb2R1Y2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGggKz0gYDx0cj48dGQ+UHJvZHVjZXM8L3RkPjx0ZD4ke2QucHJvZHVjZXMuam9pbihcIiwgXCIpfTwvdGQ+PC90cj5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuZHJvcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaCArPSBgPHRyPjx0ZD5Ecm9wczwvdGQ+PHRkPiR7ZC5kcm9wcy5qb2luKFwiLCBcIil9PC90cj5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuY29uc3VtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaCArPSBgPHRyPjx0ZD5Db25zdW1lczwvdGQ+PHRkPiR7ZC5jb25zdW1lcy5qb2luKFwiLCBcIil9PC90cj5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaCArPSBcIjwvdGFibGU+XCI7XG5cbiAgICAgICAgICAgIHJldHVybiBoO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcG9ydE1vdXNlb3ZlcihkKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudC5oaWdobGlnaHRJZCkge1xuICAgICAgICAgICAgICAgIG5hVm9yb25vaUhpZ2hsaWdodCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZDNcbiAgICAgICAgICAgICAgICAuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkYXRhLXRvZ2dsZVwiLCBcInRvb2x0aXBcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInRpdGxlXCIsIGQgPT4gbmFUb29sdGlwRGF0YShkLnByb3BlcnRpZXMpKTtcbiAgICAgICAgICAgICQoYCNjJHtkLmlkfWApXG4gICAgICAgICAgICAgICAgLnRvb2x0aXAoe1xuICAgICAgICAgICAgICAgICAgICBkZWxheTogeyBzaG93OiBkZWZhdWx0cy5oaWdobGlnaHREdXJhdGlvbiwgaGlkZTogZGVmYXVsdHMuaGlnaGxpZ2h0RHVyYXRpb24gfSxcbiAgICAgICAgICAgICAgICAgICAgaHRtbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBcImF1dG9cIlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRvb2x0aXAoXCJzaG93XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGF0YSBqb2luXG4gICAgICAgIGdQb3J0cyA9IG1haW5HUG9ydC5zZWxlY3RBbGwoXCJnLnBvcnRcIikuZGF0YShjdXJyZW50LnBvcnREYXRhLCBkID0+IGQuaWQpO1xuXG4gICAgICAgIC8vIEVudGVyXG4gICAgICAgIGxldCBub2RlR3JvdXBzRW50ZXIgPSBnUG9ydHNcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInBvcnRcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGQgPT4gYHRyYW5zbGF0ZSgke2QuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF19LCR7ZC5nZW9tZXRyeS5jb29yZGluYXRlc1sxXX0pYCk7XG4gICAgICAgIG5vZGVHcm91cHNFbnRlci5hcHBlbmQoXCJjaXJjbGVcIik7XG4gICAgICAgIG5vZGVHcm91cHNFbnRlci5hcHBlbmQoXCJjaXJjbGVcIik7XG4gICAgICAgIG5vZGVHcm91cHNFbnRlci5hcHBlbmQoXCJ0ZXh0XCIpO1xuXG4gICAgICAgIC8vIFVwZGF0ZVxuICAgICAgICAvLyBBZGQgZmxhZ3NcbiAgICAgICAgZ1BvcnRzXG4gICAgICAgICAgICAubWVyZ2Uobm9kZUdyb3Vwc0VudGVyKVxuICAgICAgICAgICAgLnNlbGVjdChcImNpcmNsZTpudGgtY2hpbGQoMilcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgZCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBjJHtkLmlkfWA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIGN1cnJlbnQuY2lyY2xlU2l6ZSlcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBkID0+IGB1cmwoIyR7ZC5wcm9wZXJ0aWVzLm5hdGlvbn0pYClcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZCA9PiAoZC5wcm9wZXJ0aWVzLmF2YWlsYWJsZUZvckFsbCA/IFwib3BhcXVlXCIgOiBcIlwiKSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBwb3J0TW91c2VvdmVyKTtcbiAgICAgICAgZ1BvcnRzXG4gICAgICAgICAgICAuc2VsZWN0KFwiY2lyY2xlOm50aC1jaGlsZCgxKVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIGN1cnJlbnQuY2lyY2xlU2l6ZSlcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBkID0+IChkLnByb3BlcnRpZXMuYXZhaWxhYmxlRm9yQWxsID8gXCJ1cmwoI05UKVwiIDogXCJub25lXCIpKTtcblxuICAgICAgICAvLyBBZGQgbGFiZWxzXG4gICAgICAgIGlmIChjdXJyZW50LmJQb3J0TGFiZWxEaXNwbGF5ZWQpIHtcbiAgICAgICAgICAgIGdQb3J0c1xuICAgICAgICAgICAgICAgIC5tZXJnZShub2RlR3JvdXBzRW50ZXIpXG4gICAgICAgICAgICAgICAgLnNlbGVjdChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImR4XCIsIGQgPT4gZC5wcm9wZXJ0aWVzLmR4KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgZCA9PiBkLnByb3BlcnRpZXMuZHkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQucHJvcGVydGllcy5keCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImVuZFwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwic3RhcnRcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRleHQoZCA9PiBkLnByb3BlcnRpZXMubmFtZSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZiA9IFwibmEtcG9ydC1vdXRcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkLnByb3BlcnRpZXMuc2hhbGxvdyAmJiAhZC5wcm9wZXJ0aWVzLmNvdW50eUNhcGl0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBcIm5hLXBvcnQtaW5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdQb3J0c1xuICAgICAgICAgICAgICAgIC5tZXJnZShub2RlR3JvdXBzRW50ZXIpXG4gICAgICAgICAgICAgICAgLnNlbGVjdChcInRleHRcIilcbiAgICAgICAgICAgICAgICAudGV4dChcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmUgb2xkXG4gICAgICAgIGdQb3J0cy5leGl0KCkucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmFUb2dnbGVEaXNwbGF5VGVsZXBvcnRBcmVhcygpIHtcbiAgICAgICAgbWFpbkdWb3Jvbm9pLnN0eWxlKFwiZGlzcGxheVwiLCBtYWluR1Zvcm9ub2kuYWN0aXZlID8gXCJub25lXCIgOiBcImluaGVyaXRcIik7XG4gICAgICAgIG1haW5HVm9yb25vaS5hY3RpdmUgPSAhbWFpbkdWb3Jvbm9pLmFjdGl2ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuYVZvcm9ub2lIaWdobGlnaHQoKSB7XG4gICAgICAgIG1haW5HVm9yb25vaS5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkMy5zZWxlY3QodGhpcykuYXR0cihcImlkXCIpID09PSBgdiR7Y3VycmVudC5oaWdobGlnaHRJZH1gID8gXCJoaWdobGlnaHQtdm9yb25vaVwiIDogXCJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIG1haW5HUG9ydC5zZWxlY3RBbGwoXCJjaXJjbGVcIikuYXR0cihcInJcIiwgZCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZC5pZCA9PT0gY3VycmVudC5oaWdobGlnaHRJZCA/IGN1cnJlbnQuY2lyY2xlU2l6ZSAqIDMgOiBjdXJyZW50LmNpcmNsZVNpemU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY3VycmVudC5iUG9ydExhYmVsRGlzcGxheWVkKSB7XG4gICAgICAgICAgICBtYWluR1BvcnRcbiAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZHhcIiwgZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmlkID09PSBjdXJyZW50LmhpZ2hsaWdodElkID8gZC5wcm9wZXJ0aWVzLmR4ICogMyA6IGQucHJvcGVydGllcy5keDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmlkID09PSBjdXJyZW50LmhpZ2hsaWdodElkID8gZC5wcm9wZXJ0aWVzLmR5ICogMyA6IGQucHJvcGVydGllcy5keTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuaWQgPT09IGN1cnJlbnQuaGlnaGxpZ2h0SWQgPyBgJHtjdXJyZW50LmZvbnRTaXplICogMn1weGAgOiBgJHtjdXJyZW50LmZvbnRTaXplfXB4YDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHpvb21BbmRQYW4odHJhbnNmb3JtKSB7XG4gICAgICAgIGxldCB0ID0ge307XG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeSh0cmFuc2Zvcm0pID09PSBKU09OLnN0cmluZ2lmeShpbml0aWFsLnRyYW5zZm9ybSkpIHtcbiAgICAgICAgICAgIHQgPSB7IGRlbGF5OiAwLCBkdXJhdGlvbjogMCB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdCA9IHsgZGVsYXk6IDUwMCwgZHVyYXRpb246IDUwMCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudC50cmFuc2Zvcm0ueCA9IHRyYW5zZm9ybS54O1xuICAgICAgICBjdXJyZW50LnRyYW5zZm9ybS55ID0gdHJhbnNmb3JtLnk7XG4gICAgICAgIGN1cnJlbnQudHJhbnNmb3JtLnNjYWxlID0gdHJhbnNmb3JtLms7XG4gICAgICAgIHRyYW5zZm9ybS54ICs9IGRlZmF1bHRzLndpZHRoIC8gMjtcbiAgICAgICAgdHJhbnNmb3JtLnkgKz0gZGVmYXVsdHMuaGVpZ2h0IC8gMjtcblxuICAgICAgICBuYVN2Z1xuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmRlbGF5KHQuZGVsYXkpXG4gICAgICAgICAgICAuZHVyYXRpb24odC5kdXJhdGlvbilcbiAgICAgICAgICAgIC5jYWxsKG5hWm9vbS50cmFuc2Zvcm0sIHRyYW5zZm9ybSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJNYXAoKSB7XG4gICAgICAgIG1haW5HQ29vcmQucmVtb3ZlKCk7XG4gICAgICAgIG1haW5HQ29vcmQgPSBuYVN2Zy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImNvb3JkXCIpO1xuICAgICAgICBjdXJyZW50LmJGaXJzdENvb3JkID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudC5saW5lRGF0YS5zcGxpY2UoMCwgY3VycmVudC5saW5lRGF0YS5sZW5ndGgpO1xuICAgICAgICBjdXJyZW50LnBvcnREYXRhID0gZGVmYXVsdHMucG9ydERhdGE7XG4gICAgICAgICQoXCIjZ29vZC1uYW1lc1wiKS5nZXQoMCkuc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICAgIHVwZGF0ZVBvcnRzKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIHN0b3BQcm9wKCkge1xuICAgICAgICAgICAgaWYgKGQzLmV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICBkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldHVwU2NhbGVEb21haW4oKSB7XG4gICAgICAgICAgICBjb25zdCBmbGF0dGVuQXJyYXkgPSBhcnIgPT4gW10uY29uY2F0LmFwcGx5KFtdLCBhcnIubWFwKGVsZW1lbnQgPT4gZWxlbWVudCkpO1xuICAgICAgICAgICAgZGVmYXVsdHMueFNjYWxlLmRvbWFpbihcbiAgICAgICAgICAgICAgICBkMy5leHRlbnQoXG4gICAgICAgICAgICAgICAgICAgIFtdLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLnBvcnREYXRhLm1hcChkID0+IGQuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmxhdHRlbkFycmF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLlBCWm9uZURhdGEuZmVhdHVyZXMubWFwKGQgPT4gW10uY29uY2F0KGQuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubWFwKGQgPT4gZFswXSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5BcnJheShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0cy5mb3J0RGF0YS5mZWF0dXJlcy5tYXAoZCA9PiBbXS5jb25jYXQoZC5nZW9tZXRyeS5jb29yZGluYXRlcy5tYXAoZCA9PiBkWzBdKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmxhdHRlbkFycmF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLnRvd2VyRGF0YS5mZWF0dXJlcy5tYXAoZCA9PiBbXS5jb25jYXQoZC5nZW9tZXRyeS5jb29yZGluYXRlcy5tYXAoZCA9PiBkWzBdKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZGVmYXVsdHMueVNjYWxlLmRvbWFpbihcbiAgICAgICAgICAgICAgICBkMy5leHRlbnQoXG4gICAgICAgICAgICAgICAgICAgIFtdLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLnBvcnREYXRhLm1hcChkID0+IGQuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmxhdHRlbkFycmF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLlBCWm9uZURhdGEuZmVhdHVyZXMubWFwKGQgPT4gW10uY29uY2F0KGQuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubWFwKGQgPT4gZFsxXSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5BcnJheShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0cy5mb3J0RGF0YS5mZWF0dXJlcy5tYXAoZCA9PiBbXS5jb25jYXQoZC5nZW9tZXRyeS5jb29yZGluYXRlcy5tYXAoZCA9PiBkWzFdKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmxhdHRlbkFycmF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLnRvd2VyRGF0YS5mZWF0dXJlcy5tYXAoZCA9PiBbXS5jb25jYXQoZC5nZW9tZXRyeS5jb29yZGluYXRlcy5tYXAoZCA9PiBkWzFdKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0dXBDYW52YXMoKSB7XG4gICAgICAgICAgICBuYUNhbnZhcyA9IGQzXG4gICAgICAgICAgICAgICAgLnNlbGVjdChcIiNuYVwiKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJjYW52YXNcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGRlZmF1bHRzLndpZHRoKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGRlZmF1bHRzLmhlaWdodClcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGAke2RlZmF1bHRzLm1hcmdpbi50b3B9cHhgKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgYCR7ZGVmYXVsdHMubWFyZ2luLmxlZnR9cHhgKVxuICAgICAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIHN0b3BQcm9wLCB0cnVlKTtcbiAgICAgICAgICAgIG5hQ29udGV4dCA9IG5hQ2FudmFzLm5vZGUoKS5nZXRDb250ZXh0KFwiMmRcIik7XG5cbiAgICAgICAgICAgIGRlZmF1bHRzLmltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIG5hRGlzcGxheUNvdW50cmllcyhpbml0aWFsLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVmYXVsdHMuaW1hZ2Uuc3JjID0gZGVmYXVsdHMuaW1hZ2VTcmM7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXR1cFN2ZygpIHtcbiAgICAgICAgICAgIGNvbnN0IHpvb21QYWRkaW5nID0gZGVmYXVsdHMuY29vcmQubWF4IC8gNTA7XG4gICAgICAgICAgICBuYVpvb20gPSBkM1xuICAgICAgICAgICAgICAgIC56b29tKClcbiAgICAgICAgICAgICAgICAuc2NhbGVFeHRlbnQoW2RlZmF1bHRzLm1pblNjYWxlLCBkZWZhdWx0cy5tYXhTY2FsZV0pXG4gICAgICAgICAgICAgICAgLnRyYW5zbGF0ZUV4dGVudChbXG4gICAgICAgICAgICAgICAgICAgIFtkZWZhdWx0cy5jb29yZC5taW4gLSB6b29tUGFkZGluZywgZGVmYXVsdHMuY29vcmQubWluIC0gem9vbVBhZGRpbmddLFxuICAgICAgICAgICAgICAgICAgICBbZGVmYXVsdHMuY29vcmQubWF4ICsgem9vbVBhZGRpbmcsIGRlZmF1bHRzLmNvb3JkLm1heCArIHpvb21QYWRkaW5nXVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgLm9uKFwiem9vbVwiLCBuYVpvb21lZCk7XG5cbiAgICAgICAgICAgIG5hU3ZnID0gZDNcbiAgICAgICAgICAgICAgICAuc2VsZWN0KFwiI25hXCIpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJuYS1zdmdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGRlZmF1bHRzLndpZHRoKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGRlZmF1bHRzLmhlaWdodClcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGAke2RlZmF1bHRzLm1hcmdpbi50b3B9cHhgKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgYCR7ZGVmYXVsdHMubWFyZ2luLmxlZnR9cHhgKVxuICAgICAgICAgICAgICAgIC5jYWxsKG5hWm9vbSlcbiAgICAgICAgICAgICAgICAub24oXCJkYmxjbGljay56b29tXCIsIG51bGwpXG4gICAgICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgc3RvcFByb3AsIHRydWUpXG4gICAgICAgICAgICAgICAgLm9uKFwiZGJsY2xpY2tcIiwgZG91YmxlQ2xpY2tBY3Rpb24pO1xuXG4gICAgICAgICAgICBzdmdEZWYgPSBuYVN2Zy5hcHBlbmQoXCJkZWZzXCIpO1xuICAgICAgICAgICAgc3ZnRGVmXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcIm1hcmtlclwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJhcnJvd1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidmlld0JveFwiLCBcIjAgLTUgMTAgMTBcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInJlZlhcIiwgNSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInJlZllcIiwgMClcbiAgICAgICAgICAgICAgICAuYXR0cihcIm1hcmtlcldpZHRoXCIsIDQpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgNClcbiAgICAgICAgICAgICAgICAuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIilcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBcIk0wLC01TDEwLDBMMCw1XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImFycm93LWhlYWRcIik7XG5cbiAgICAgICAgICAgIG1haW5HVm9yb25vaSA9IG5hU3ZnLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidm9yb25vaVwiKTtcbiAgICAgICAgICAgIG1haW5HUG9ydCA9IG5hU3ZnLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwicG9ydFwiKTtcbiAgICAgICAgICAgIG1haW5HUEJab25lID0gbmFTdmdcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJwYlwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgICAgICAgICAgbWFpbkdDb29yZCA9IG5hU3ZnLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiY29vcmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXR1cFBvcnRzKCkge1xuICAgICAgICAgICAgY29uc3QgbmF0aW9ucyA9IFtcIkRFXCIsIFwiREtcIiwgXCJFU1wiLCBcIkZSXCIsIFwiRlRcIiwgXCJHQlwiLCBcIk5UXCIsIFwiUExcIiwgXCJQUlwiLCBcIlJVXCIsIFwiU0VcIiwgXCJVU1wiLCBcIlZQXCJdO1xuXG4gICAgICAgICAgICBuYXRpb25zLmZvckVhY2goZnVuY3Rpb24obmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgc3ZnRGVmXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJwYXR0ZXJuXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgbmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIFwiMTAwJVwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBcIjEwMCVcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ2aWV3Qm94XCIsIGAwIDAgJHtkZWZhdWx0cy5pY29uU2l6ZX0gJHtkZWZhdWx0cy5pY29uU2l6ZX1gKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwiaW1hZ2VcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZGVmYXVsdHMuaWNvblNpemUpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZGVmYXVsdHMuaWNvblNpemUpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaHJlZlwiLCBgaWNvbnMvJHtuYXRpb259LnN2Z2ApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXR1cFRlbGVwb3J0QXJlYXMoKSB7XG4gICAgICAgICAgICAvLyBFeHRyYWN0IHBvcnQgY29vcmRpbmF0ZXNcbiAgICAgICAgICAgIG5hVGVsZXBvcnRQb3J0cyA9IGRlZmF1bHRzLnBvcnREYXRhXG4gICAgICAgICAgICAgICAgLy8gVXNlIG9ubHkgcG9ydHMgdGhhdCBkZWVwIHdhdGVyIHBvcnRzIGFuZCBub3QgYSBjb3VudHkgY2FwaXRhbFxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZCA9PiAhZC5wcm9wZXJ0aWVzLnNoYWxsb3cgJiYgIWQucHJvcGVydGllcy5jb3VudHlDYXBpdGFsKVxuICAgICAgICAgICAgICAgIC8vIE1hcCB0byBjb29yZGluYXRlcyBhcnJheVxuICAgICAgICAgICAgICAgIC5tYXAoZCA9PiAoe1xuICAgICAgICAgICAgICAgICAgICBpZDogZC5pZCxcbiAgICAgICAgICAgICAgICAgICAgY29vcmQ6IHsgeDogZC5nZW9tZXRyeS5jb29yZGluYXRlc1swXSwgeTogZC5nZW9tZXRyeS5jb29yZGluYXRlc1sxXSB9XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBwYXRoVm9yb25vaSA9IG1haW5HVm9yb25vaVxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCIudm9yb25vaVwiKVxuICAgICAgICAgICAgICAgIC5kYXRhKG5hVGVsZXBvcnRQb3J0cylcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBkID0+IGB2JHtkLmlkfWApO1xuXG4gICAgICAgICAgICBuYVZvcm9ub2lEaWFncmFtID0gZDNcbiAgICAgICAgICAgICAgICAudm9yb25vaSgpXG4gICAgICAgICAgICAgICAgLmV4dGVudChkZWZhdWx0cy5jb29yZC52b3Jvbm9pKVxuICAgICAgICAgICAgICAgIC54KGQgPT4gZC5jb29yZC54KVxuICAgICAgICAgICAgICAgIC55KGQgPT4gZC5jb29yZC55KShuYVRlbGVwb3J0UG9ydHMpO1xuXG4gICAgICAgICAgICAvLyBEcmF3IHRlbGVwb3J0IGFyZWFzXG4gICAgICAgICAgICBwYXRoVm9yb25vaVxuICAgICAgICAgICAgICAgIC5kYXRhKG5hVm9yb25vaURpYWdyYW0ucG9seWdvbnMoKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgZCA9PiAoZCA/IGBNJHtkLmpvaW4oXCJMXCIpfVpgIDogbnVsbCkpXG4gICAgICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVmID0gZDMubW91c2UodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG14ID0gcmVmWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbXkgPSByZWZbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdXNlIHRoZSBuZXcgZGlhZ3JhbS5maW5kKCkgZnVuY3Rpb24gdG8gZmluZCB0aGUgdm9yb25vaSBzaXRlIGNsb3Nlc3QgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG1vdXNlLCBsaW1pdGVkIGJ5IG1heCBkaXN0YW5jZSBkZWZpbmVkIGJ5IGRlZmF1bHRzLnZvcm9ub2lSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2l0ZSA9IG5hVm9yb25vaURpYWdyYW0uZmluZChteCwgbXksIGRlZmF1bHRzLnZvcm9ub2lSYWRpdXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2l0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5oaWdobGlnaHRJZCA9IHNpdGUuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hVm9yb25vaUhpZ2hsaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFWb3Jvbm9pSGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuYVRvZ2dsZURpc3BsYXlUZWxlcG9ydEFyZWFzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXR1cFBCWm9uZXMoKSB7XG4gICAgICAgICAgICBtYWluR1BCWm9uZVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgLmRhdHVtKGRlZmF1bHRzLlBCWm9uZURhdGEpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInBiLXpvbmVcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgZDMuZ2VvUGF0aCgpLnBvaW50UmFkaXVzKDQpKTtcblxuICAgICAgICAgICAgbWFpbkdQQlpvbmVcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgIC5kYXR1bShkZWZhdWx0cy50b3dlckRhdGEpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRvd2VyXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGQzLmdlb1BhdGgoKS5wb2ludFJhZGl1cygxLjUpKTtcblxuICAgICAgICAgICAgbWFpbkdQQlpvbmVcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgIC5kYXR1bShkZWZhdWx0cy5mb3J0RGF0YSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZm9ydFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBkMy5nZW9QYXRoKCkucG9pbnRSYWRpdXMoMikpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0dXBTZWxlY3RzKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXBQb3J0U2VsZWN0KCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvcnROYW1lcyA9ICQoXCIjcG9ydC1uYW1lc1wiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RQb3J0cyA9IGRlZmF1bHRzLnBvcnREYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZCA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQ6IFtkLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdLCBkLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGQucHJvcGVydGllcy5uYW1lXG4gICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYS5uYW1lIDwgYi5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEubmFtZSA+IGIubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHBvcnROYW1lcy5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICQoXCI8b3B0aW9uPlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiU2VsZWN0IGEgcG9ydFwiXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RQb3J0cy5mb3JFYWNoKGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9ydE5hbWVzLmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCI8b3B0aW9uPlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHBvcnQuY29vcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogcG9ydC5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXR1cEdvb2RTZWxlY3QoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ29vZE5hbWVzID0gJChcIiNnb29kLW5hbWVzXCIpO1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RHb29kcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICBsZXQgZ29vZHNQZXJQb3J0ID0gZGVmYXVsdHMucG9ydERhdGEubWFwKGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZ29vZHMgPSBkLnByb3BlcnRpZXMuZHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIGdvb2RzICs9IGQucHJvcGVydGllcy5wcm9kdWNlcyA/IGAsJHtkLnByb3BlcnRpZXMucHJvZHVjZXN9YCA6IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvb2RzOiBnb29kc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZ29vZHNQZXJQb3J0LmZvckVhY2goZnVuY3Rpb24ocG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBwb3J0Lmdvb2RzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGdvb2QgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdvb2QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3J0cyA9IG5ldyBTZXQoc2VsZWN0R29vZHMuZ2V0KGdvb2QpKS5hZGQocG9ydC5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0R29vZHMuc2V0KGdvb2QsIHBvcnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2VsZWN0R29vZHMgPSBuZXcgTWFwKEFycmF5LmZyb20oc2VsZWN0R29vZHMpLnNvcnQoKSk7XG4gICAgICAgICAgICAgICAgZ29vZE5hbWVzLmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgJChcIjxvcHRpb24+XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJTZWxlY3QgYSBnb29kXCJcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgcG9ydElkc10gb2Ygc2VsZWN0R29vZHMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpZHMgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIHBvcnRJZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkcyArPSBgLCR7aWR9YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBnb29kTmFtZXMuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIjxvcHRpb24+XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaWRzLnN1YnN0cigxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnb1RvUG9ydChjb29yZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBjb29yZC5zcGxpdChcIixcIiksXG4gICAgICAgICAgICAgICAgICAgIHggPSBjWzBdLFxuICAgICAgICAgICAgICAgICAgICB5ID0gY1sxXTtcblxuICAgICAgICAgICAgICAgIHpvb21BbmRQYW4oZDMuem9vbUlkZW50aXR5LnRyYW5zbGF0ZSgteCwgLXkpLnNjYWxlKDEpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0dXBQb3J0U2VsZWN0KCk7XG4gICAgICAgICAgICAkKFwiI3BvcnQtbmFtZXNcIikuY2hhbmdlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBnb1RvUG9ydCgkKFwiI3BvcnQtbmFtZXNcIikudmFsKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZXR1cEdvb2RTZWxlY3QoKTtcbiAgICAgICAgICAgICQoXCIjZ29vZC1uYW1lc1wiKS5jaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvcnRJZHMgPSAkKFwiI2dvb2QtbmFtZXNcIilcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgpXG4gICAgICAgICAgICAgICAgICAgIC5zcGxpdChcIixcIik7XG4gICAgICAgICAgICAgICAgaWYgKHBvcnRJZHMuaW5jbHVkZXMoXCIwXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQucG9ydERhdGEgPSBkZWZhdWx0cy5wb3J0RGF0YTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnBvcnREYXRhID0gZGVmYXVsdHMucG9ydERhdGEuZmlsdGVyKGQgPT4gcG9ydElkcy5pbmNsdWRlcyhkLmlkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVwZGF0ZVBvcnRzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldHVwU2NhbGVEb21haW4oKTtcbiAgICAgICAgc2V0dXBDYW52YXMoKTtcbiAgICAgICAgc2V0dXBTdmcoKTtcbiAgICAgICAgc2V0dXBUZWxlcG9ydEFyZWFzKCk7XG4gICAgICAgIHNldHVwUG9ydHMoKTtcbiAgICAgICAgc2V0dXBQQlpvbmVzKCk7XG4gICAgICAgIHNldHVwU2VsZWN0cygpO1xuICAgICAgICBtb21lbnQubG9jYWxlKFwiZW4tZ2JcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlZGljdFdpbmQoY3VycmVudFdpbmQsIHByZWRpY3RUaW1lKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhc3NUb0RlZ3JlZXMoY29tcGFzcykge1xuICAgICAgICAgICAgY29uc3QgZGVncmVlID0gMzYwIC8gZGVmYXVsdHMuY29tcGFzc0RpcmVjdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRzLmNvbXBhc3NEaXJlY3Rpb25zLmluZGV4T2YoY29tcGFzcykgKiBkZWdyZWU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwcmludFByZWRpY3RlZFdpbmQocHJlZGljdGVkV2luZERlZ3JlZXMsIHByZWRpY3RUaW1lLCBjdXJyZW50V2luZCwgY3VycmVudFRpbWUpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHByaW50V2luZExpbmUoeCwgZHgsIHksIGR5LCBkZWdyZWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcGFzcyA9IGRlZ3JlZXNUb0NvbXBhc3MoZGVncmVlcyk7XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50LmxpbmVEYXRhLnB1c2goW3ggKyBkeCAvIDIsIHkgKyBkeSAvIDJdKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50LmxpbmVEYXRhLnB1c2goW3ggLSBkeCAvIDIsIHkgLSBkeSAvIDJdKTtcblxuICAgICAgICAgICAgICAgIGdDb21wYXNzXG4gICAgICAgICAgICAgICAgICAgIC5kYXR1bShjdXJyZW50LmxpbmVEYXRhKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgZGVmYXVsdHMubGluZSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIndpbmRcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJtYXJrZXItZW5kXCIsIFwidXJsKCNhcnJvdylcIik7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gbWFpbkdDb29yZC5hcHBlbmQoXCJyZWN0XCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN2ZyA9IG1haW5HQ29vcmQuYXBwZW5kKFwic3ZnXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHQxID0gc3ZnXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBcIjUwJVwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgXCIzMyVcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIndpbmQtdGV4dFwiKVxuICAgICAgICAgICAgICAgICAgICAudGV4dChgRnJvbSAke2NvbXBhc3N9IGF0ICR7cHJlZGljdFRpbWV9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dDIgPSBzdmdcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIFwiNTAlXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBcIjY2JVwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwid2luZC10ZXh0LWN1cnJlbnRcIilcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoYEN1cnJlbnRseSBhdCAke2N1cnJlbnRUaW1lfSBmcm9tICR7Y3VycmVudFdpbmR9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmJveDEgPSB0ZXh0MS5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICAgICAgICAgIGJib3gyID0gdGV4dDIubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1heChiYm94MS5oZWlnaHQsIGJib3gyLmhlaWdodCkgKiAyICsgZGVmYXVsdHMuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gTWF0aC5tYXgoYmJveDEud2lkdGgsIGJib3gyLndpZHRoKSArIGRlZmF1bHRzLmZvbnRTaXplO1xuICAgICAgICAgICAgICAgIHN2Z1xuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgeCAtIHdpZHRoIC8gMilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHkgKyAyMClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKTtcbiAgICAgICAgICAgICAgICByZWN0XG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCB4IC0gd2lkdGggLyAyKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgeSAtIDIwIC0gZGVmYXVsdHMuZm9udFNpemUgLyAyKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQgKyA0MCArIGRlZmF1bHRzLmZvbnRTaXplKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0U2NhbGUgPSA0LFxuICAgICAgICAgICAgICAgIHNjYWxlID0gdGFyZ2V0U2NhbGUgLyBjdXJyZW50LnRyYW5zZm9ybS5zY2FsZSxcbiAgICAgICAgICAgICAgICB4ID0gLWN1cnJlbnQudHJhbnNmb3JtLnggKiBzY2FsZSxcbiAgICAgICAgICAgICAgICB4Q29tcGFzcyA9IC1jdXJyZW50LnRyYW5zZm9ybS54IC8gY3VycmVudC50cmFuc2Zvcm0uc2NhbGUgLSBkZWZhdWx0cy53aWR0aCAvIDI1LFxuICAgICAgICAgICAgICAgIHkgPSAtY3VycmVudC50cmFuc2Zvcm0ueSAqIHNjYWxlLFxuICAgICAgICAgICAgICAgIHlDb21wYXNzID0gLWN1cnJlbnQudHJhbnNmb3JtLnkgLyBjdXJyZW50LnRyYW5zZm9ybS5zY2FsZSAtIGRlZmF1bHRzLmhlaWdodCAvIDI1LFxuICAgICAgICAgICAgICAgIGxlbmd0aCA9IDQwLFxuICAgICAgICAgICAgICAgIHJhZGlhbnMgPSBNYXRoLlBJIC8gMTgwICogKHByZWRpY3RlZFdpbmREZWdyZWVzIC0gOTApLFxuICAgICAgICAgICAgICAgIGR4ID0gbGVuZ3RoICogTWF0aC5jb3MocmFkaWFucyksXG4gICAgICAgICAgICAgICAgZHkgPSBsZW5ndGggKiBNYXRoLnNpbihyYWRpYW5zKTtcblxuICAgICAgICAgICAgY2xlYXJNYXAoKTtcbiAgICAgICAgICAgIHBsb3RDb3Vyc2UoeENvbXBhc3MsIHlDb21wYXNzLCBcIndpbmRcIik7XG4gICAgICAgICAgICBwcmludFdpbmRMaW5lKHhDb21wYXNzLCBkeCwgeUNvbXBhc3MsIGR5LCBwcmVkaWN0ZWRXaW5kRGVncmVlcyk7XG4gICAgICAgICAgICB6b29tQW5kUGFuKGQzLnpvb21JZGVudGl0eS50cmFuc2xhdGUoLXgsIC15KS5zY2FsZSh0YXJnZXRTY2FsZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2Vjb25kc0ZvckZ1bGxDaXJjbGUgPSA0OCAqIDYwLFxuICAgICAgICAgICAgZnVsbENpcmNsZSA9IDM2MCxcbiAgICAgICAgICAgIGRlZ3JlZXNQZXJTZWNvbmQgPSBmdWxsQ2lyY2xlIC8gc2Vjb25kc0ZvckZ1bGxDaXJjbGU7XG4gICAgICAgIGxldCBjdXJyZW50V2luZERlZ3JlZXM7XG5cbiAgICAgICAgY29uc3QgcmVnZXggPSAvKFxcZCspW1xcczouXShcXGQrKS87XG4gICAgICAgIGxldCBtYXRjaCA9IHJlZ2V4LmV4ZWMocHJlZGljdFRpbWUpLFxuICAgICAgICAgICAgcHJlZGljdEhvdXJzID0gcGFyc2VJbnQobWF0Y2hbMV0pLFxuICAgICAgICAgICAgcHJlZGljdE1pbnV0ZXMgPSBwYXJzZUludChtYXRjaFsyXSk7XG5cbiAgICAgICAgLy8gU2V0IGN1cnJlbnQgd2luZCBpbiBkZWdyZWVzXG4gICAgICAgIGlmIChpc05hTihjdXJyZW50V2luZCkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRXaW5kRGVncmVlcyA9IGNvbXBhc3NUb0RlZ3JlZXMoY3VycmVudFdpbmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudFdpbmREZWdyZWVzID0gK2N1cnJlbnRXaW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJlbnREYXRlID0gbW9tZW50KClcbiAgICAgICAgICAgICAgICAudXRjKClcbiAgICAgICAgICAgICAgICAuc2Vjb25kcygwKVxuICAgICAgICAgICAgICAgIC5taWxsaXNlY29uZHMoMCksXG4gICAgICAgICAgICBwcmVkaWN0RGF0ZSA9IG1vbWVudChjdXJyZW50RGF0ZSlcbiAgICAgICAgICAgICAgICAuaG91cihwcmVkaWN0SG91cnMpXG4gICAgICAgICAgICAgICAgLm1pbnV0ZXMocHJlZGljdE1pbnV0ZXMpO1xuICAgICAgICBpZiAocHJlZGljdERhdGUuaXNCZWZvcmUoY3VycmVudERhdGUpKSB7XG4gICAgICAgICAgICBwcmVkaWN0RGF0ZS5hZGQoMSwgXCJkYXlcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGltZURpZmZJblNlYyA9IHByZWRpY3REYXRlLmRpZmYoY3VycmVudERhdGUsIFwic2Vjb25kc1wiKTtcbiAgICAgICAgbGV0IHByZWRpY3RlZFdpbmREZWdyZWVzID0gTWF0aC5hYnMoY3VycmVudFdpbmREZWdyZWVzIC0gZGVncmVlc1BlclNlY29uZCAqIHRpbWVEaWZmSW5TZWMgKyAzNjApICUgMzYwO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coYGN1cnJlbnRXaW5kOiAke2N1cnJlbnRXaW5kfSBjdXJyZW50V2luZERlZ3JlZXM6ICR7Y3VycmVudFdpbmREZWdyZWVzfWApO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGAgICBjdXJyZW50RGF0ZTogJHtjdXJyZW50RGF0ZS5mb3JtYXQoKX0gcHJlZGljdERhdGU6ICR7cHJlZGljdERhdGUuZm9ybWF0KCl9YCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coYCAgIHByZWRpY3RlZFdpbmREZWdyZWVzOiAke3ByZWRpY3RlZFdpbmREZWdyZWVzfSBwcmVkaWN0VGltZTogJHtwcmVkaWN0VGltZX1gKTtcbiAgICAgICAgcHJpbnRQcmVkaWN0ZWRXaW5kKHByZWRpY3RlZFdpbmREZWdyZWVzLCBwcmVkaWN0RGF0ZS5mb3JtYXQoXCJILm1tXCIpLCBjdXJyZW50V2luZCwgY3VycmVudERhdGUuZm9ybWF0KFwiSC5tbVwiKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmFSZWFkeShlcnJvciwgbmFNYXAsIHBiWm9uZXMpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlYWQgbWFwIGRhdGFcbiAgICAgICAgZGVmYXVsdHMucG9ydERhdGEgPSB0b3BvanNvbkZlYXR1cmUobmFNYXAsIG5hTWFwLm9iamVjdHMucG9ydHMpLmZlYXR1cmVzO1xuICAgICAgICBjdXJyZW50LnBvcnREYXRhID0gZGVmYXVsdHMucG9ydERhdGE7XG4gICAgICAgIGRlZmF1bHRzLlBCWm9uZURhdGEgPSB0b3BvanNvbkZlYXR1cmUocGJab25lcywgcGJab25lcy5vYmplY3RzLnBiWm9uZXMpO1xuICAgICAgICBkZWZhdWx0cy5mb3J0RGF0YSA9IHRvcG9qc29uRmVhdHVyZShwYlpvbmVzLCBwYlpvbmVzLm9iamVjdHMuZm9ydHMpO1xuICAgICAgICBkZWZhdWx0cy50b3dlckRhdGEgPSB0b3BvanNvbkZlYXR1cmUocGJab25lcywgcGJab25lcy5vYmplY3RzLnRvd2Vycyk7XG5cbiAgICAgICAgc2V0dXAoKTtcbiAgICAgICAgem9vbUFuZFBhbihpbml0aWFsLnRyYW5zZm9ybSk7XG4gICAgICAgIC8vdXBkYXRlUG9ydHMoY3VycmVudC5wb3J0RGF0YS5maWx0ZXIoZCA9PiBbXCIyMzRcIiwgXCIyMzdcIiwgXCIyMzhcIiwgXCIyMzlcIiwgXCIyNDBcIl0uaW5jbHVkZXMoZC5pZCkpKTtcbiAgICAgICAgdXBkYXRlUG9ydHMoKTtcblxuICAgICAgICAvKlxuICAgICAgICBsZXQgcHJlZGljdFRpbWUgPSBtb21lbnQoKS51dGMoKSxcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwibm5lXCIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgY29uc29sZS5sb2coYC0tLS0+ICAgcHJlZGljdFRpbWU6ICR7cHJlZGljdFRpbWUuZm9ybWF0KCl9YCk7XG4gICAgICAgIHByZWRpY3RXaW5kKGRpcmVjdGlvbiwgYCR7cHJlZGljdFRpbWUuaG91cnMoKX06JHtwcmVkaWN0VGltZS5taW51dGVzKCl9YCk7XG4gICAgICAgIHByZWRpY3RUaW1lLmFkZCg0OCAvIDQsIFwibWludXRlc1wiKTtcbiAgICAgICAgY29uc29sZS5sb2coYC0tLS0+ICAgcHJlZGljdFRpbWU6ICR7cHJlZGljdFRpbWUuZm9ybWF0KCl9YCk7XG4gICAgICAgIHByZWRpY3RXaW5kKGRpcmVjdGlvbiwgYCR7cHJlZGljdFRpbWUuaG91cnMoKX06JHtwcmVkaWN0VGltZS5taW51dGVzKCl9YCk7XG4gICAgICAgICovXG5cbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjI1ODEzNDUvY2xpY2stYnV0dG9uLWNvcHktdG8tY2xpcGJvYXJkLXVzaW5nLWpxdWVyeVxuICAgICAgICBmdW5jdGlvbiBjb3B5RjExVG9DbGlwYm9hcmQoRjExY29vcmQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGMTFjb29yZDogJHtGMTFjb29yZH1gKTtcbiAgICAgICAgICAgIGxldCB0ZW1wID0gJChcIjxpbnB1dD5cIik7XG4gICAgICAgICAgICAkKFwiYm9keVwiKS5hcHBlbmQodGVtcCk7XG4gICAgICAgICAgICB0ZW1wLnZhbChGMTFjb29yZCkuc2VsZWN0KCk7XG4gICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIik7XG4gICAgICAgICAgICB0ZW1wLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGFzdGVGMTFGcm9tQ2xpcGJvYXJkKGV2ZW50KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRGMTFTdHJpbmdUb0lucHV0KEYxMVN0cmluZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBhZGRGMTFTdHJpbmdUb0lucHV0IEYxMVN0cmluZzogJHtGMTFTdHJpbmd9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSAvRjExIGNvb3JkaW5hdGVzIFg6IChbLStdP1swLTldKlxcLj9bMC05XSspIFo6IChbLStdP1swLTldKlxcLj9bMC05XSspL2c7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSByZWdleC5leGVjKEYxMVN0cmluZyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYG1hdGNoWzFdOiAke21hdGNoWzFdfSBtYXRjaFsyXTogJHttYXRjaFsyXX1gKTtcblxuICAgICAgICAgICAgICAgICQoXCIjeC1jb29yZFwiKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCttYXRjaFsxXSlcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgICQoXCIjei1jb29yZFwiKS52YWx1ZSA9ICttYXRjaFsyXTtcbiAgICAgICAgICAgIH1cbmNvbnN0IEYxMVN0cmluZyA9IGRvY3VtZW50LmV4ZWNDb21tYW5kKFwicGFzdGVcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgcGFzdGVGMTFGcm9tQ2xpcGJvYXJkIEYxMVN0cmluZzogJHtGMTFTdHJpbmd9YCk7XG4gICAgICAgICAgICBhZGRGMTFTdHJpbmdUb0lucHV0KEYxMVN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAkKFwiI2NvcHktY29vcmRcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gJChcIiN4LWNvb3JkXCIpLnZhbCgpLFxuICAgICAgICAgICAgICAgIHogPSAkKFwiI3otY29vcmRcIikudmFsKCk7XG4gICAgICAgICAgICBpZiAoIU51bWJlci5pc05hTih6KSAmJiAhTnVtYmVyLmlzTmFOKHopKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgRjExU3RyaW5nID0gYEYxMSBjb29yZGluYXRlcyBYOiAke3h9IFo6ICR7en1gO1xuICAgICAgICAgICAgICAgIGNvcHlGMTFUb0NsaXBib2FyZChGMTFTdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkKFwiI3Bhc3RlLWNvb3JkXCIpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBwYXN0ZUYxMUZyb21DbGlwYm9hcmQoZXZlbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKFwiI2YxMVwiKS5zdWJtaXQoZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSAkKFwiI3gtY29vcmRcIikudmFsKCksXG4gICAgICAgICAgICAgICAgeiA9ICQoXCIjei1jb29yZFwiKS52YWwoKTtcbiAgICAgICAgICAgIGdvVG9GMTEoeCwgeik7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgJChcIiNkaXJlY3Rpb25cIikua25vYih7XG4gICAgICAgICAgICBiZ0NvbG9yOiBcIiNlZGUxZDJcIiwgLy8gcHJpbWFyeS0yMDBcbiAgICAgICAgICAgIHRoaWNrbmVzczogMC4yLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiAzNTksXG4gICAgICAgICAgICBzdGVwOiAzNjAgLyBkZWZhdWx0cy5jb21wYXNzRGlyZWN0aW9ucy5sZW5ndGgsXG4gICAgICAgICAgICBjdXJzb3I6IHRydWUsXG4gICAgICAgICAgICBmZ0NvbG9yOiBcIiM5MTdmNjhcIiwgLy8gcHJpbWFyeS03MDBcbiAgICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQodGhpcy5pKS5jc3MoXCJjbGFzc1wiLCBcImtub2JcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9ybWF0OiBpbnB1dCA9PiBkZWdyZWVzVG9Db21wYXNzKGlucHV0KVxuICAgICAgICB9KTtcbiAgICAgICAgJChcIiN3aW5kUHJlZGljdGlvblwiKS5zdWJtaXQoZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRXaW5kID0gJChcIiNkaXJlY3Rpb25cIilcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgpXG4gICAgICAgICAgICAgICAgICAgIC50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgICAgIHRpbWUgPSAkKFwiI3RpbWVcIikudmFsKCk7XG4gICAgICAgICAgICBwcmVkaWN0V2luZChjdXJyZW50V2luZCwgdGltZSk7XG4gICAgICAgICAgICAkKFwiI3ByZWRpY3REcm9wZG93blwiKS5kcm9wZG93bihcInRvZ2dsZVwiKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICAkKFwiI3Jlc2V0XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjbGVhck1hcCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgJChcIi5yYWRpby1ncm91cFwiKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjdXJyZW50LnJhZGlvQnV0dG9uID0gJChcImlucHV0W25hbWU9J21vdXNlRnVuY3Rpb24nXTpjaGVja2VkXCIpLnZhbCgpO1xuICAgICAgICAgICAgY2xlYXJNYXAoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZDNcbiAgICAgICAgLnF1ZXVlKClcbiAgICAgICAgLmRlZmVyKGQzLmpzb24sIGRlZmF1bHRzLm1hcEpzb24pXG4gICAgICAgIC5kZWZlcihkMy5qc29uLCBkZWZhdWx0cy5wYkpzb24pXG4gICAgICAgIC5hd2FpdChuYVJlYWR5KTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL25hLWRpc3BsYXkuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n");

/***/ })

})
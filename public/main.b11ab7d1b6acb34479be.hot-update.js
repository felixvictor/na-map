webpackHotUpdate("main",{

/***/ "./js/na-display.js":
/*!**************************!*\
  !*** ./js/na-display.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return naDisplay; });\n/* harmony import */ var topojson_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! topojson-client */ \"../node_modules/topojson-client/index.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ \"../node_modules/moment/moment.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var moment_locale_en_gb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment/locale/en-gb */ \"../node_modules/moment/locale/en-gb.js\");\n/* harmony import */ var moment_locale_en_gb__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment_locale_en_gb__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! js-cookie */ \"../node_modules/js-cookie/src/js.cookie.js\");\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(js_cookie__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var bootstrap_js_dist_tooltip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bootstrap/js/dist/tooltip */ \"../node_modules/bootstrap/js/dist/tooltip.js\");\n/* harmony import */ var bootstrap_js_dist_tooltip__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bootstrap_js_dist_tooltip__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var bootstrap_js_dist_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bootstrap/js/dist/util */ \"../node_modules/bootstrap/js/dist/util.js\");\n/* harmony import */ var bootstrap_js_dist_util__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(bootstrap_js_dist_util__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common */ \"./js/common.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util */ \"./js/util.js\");\n/* harmony import */ var _course__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./course */ \"./js/course.js\");\n/* harmony import */ var _f11__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./f11 */ \"./js/f11.js\");\n/* harmony import */ var _grid__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./grid */ \"./js/grid.js\");\n/* harmony import */ var _pbzone__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./pbzone */ \"./js/pbzone.js\");\n/* harmony import */ var _port__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./port */ \"./js/port.js\");\n/* harmony import */ var _port_select__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./port-select */ \"./js/port-select.js\");\n/* harmony import */ var _ship_compare__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ship-compare */ \"./js/ship-compare.js\");\n/* harmony import */ var _teleport__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./teleport */ \"./js/teleport.js\");\n/* harmony import */ var _wind_prediction__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./wind-prediction */ \"./js/wind-prediction.js\");\n/* harmony import */ var _wood_compare__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./wood-compare */ \"./js/wood-compare.js\");\n/* harmony import */ var _module_list__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./module-list */ \"./js/module-list.js\");\n/* harmony import */ var _recipe_list__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./recipe-list */ \"./js/recipe-list.js\");\n/* harmony import */ var _ingredient_list__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ingredient-list */ \"./js/ingredient-list.js\");\n/* harmony import */ var _building_list__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./building-list */ \"./js/building-list.js\");\n/* harmony import */ var _analytics__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./analytics */ \"./js/analytics.js\");\n/**\n * This file is part of na-map.\n *\n * @file      Display naval action map.\n * @module    na-display\n * @author    iB aka Felix Victor\n * @copyright 2017, 2018\n * @license   http://www.gnu.org/licenses/gpl.html\n */\n\n/* global d3 : false\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Display naval action map\n * @param {string} serverName - Naval action server name\n * @returns {void}\n */\n\nfunction naDisplay(serverName) {\n  var map, ports, teleport, portSelect, shipCompare, woodCompare, moduleList, recipeList, ingredientList, buildingList, windPrediction, f11, course, grid, pbZone;\n  /** Main map */\n\n  var NAMap =\n  /*#__PURE__*/\n  function () {\n    /**\n     * Constructor\n     */\n    function NAMap() {\n      /**\n       * Font size in px\n       * @type {Number}\n       */\n      this.rem = _common__WEBPACK_IMPORTED_MODULE_6__[\"defaultFontSize\"];\n      /**\n       * Left padding for brand icon\n       * @type {Number}\n       */\n\n      this._navbarBrandPaddingLeft = Math.floor(1.618 * this.rem); // equals 1.618rem\n\n      /**\n       * Left padding for brand icon\n       * @type {Number}\n       */\n\n      this.xGridBackgroundHeight = Math.floor(3 * this.rem);\n      /**\n       * Left padding for brand icon\n       * @type {Number}\n       */\n\n      this.yGridBackgroundWidth = Math.floor(4 * this.rem);\n      /**\n       * Margins of the map svg\n       * @type {Object}\n       * @property {Number} top - Top margin\n       * @property {Number} right - Right margin\n       * @property {Number} bottom - Bottom margin\n       * @property {Number} left - Left margin\n       */\n\n      this.margin = {\n        top: Math.floor($(\".navbar\").height() + this._navbarBrandPaddingLeft),\n        right: this._navbarBrandPaddingLeft,\n        bottom: this._navbarBrandPaddingLeft,\n        left: this._navbarBrandPaddingLeft\n      };\n      /**\n       * Outer bounds (world coordinates)\n       * @type {Object}\n       * @property {Number} min - Minimum world coordinate\n       * @property {Number} max - Maximum world coordinate\n       */\n\n      this.coord = {\n        min: 0,\n        max: 8192\n      };\n      /**\n       * Width of map svg (screen coordinates)\n       * @type {Number}\n       */\n      // eslint-disable-next-line no-restricted-globals\n\n      this._width = Math.floor(top.innerWidth - this.margin.left - this.margin.right);\n      /**\n       * Height of map svg (screen coordinates)\n       * @type {Number}\n       */\n      // eslint-disable-next-line no-restricted-globals\n\n      this._height = Math.floor(top.innerHeight - this.margin.top - this.margin.bottom);\n      this._tileSize = 256;\n      this._maxScale = Math.pow(2, 3); // power of 2\n\n      this._wheelDelta = 0.5;\n      this._zoomLevel = \"initial\";\n      this._PBZoneZoomThreshold = 1.5;\n      this._labelZoomThreshold = 0.5;\n      this.minScale = Object(_util__WEBPACK_IMPORTED_MODULE_7__[\"nearestPow2\"])(Math.min(this._width / this.coord.max, this._height / this.coord.max));\n      /**\n       * Current map scale\n       * @type {Number}\n       */\n\n      this.currentScale = this.minScale;\n      /**\n       * DoubleClickAction cookie name\n       * @type {string}\n       * @private\n       */\n\n      this._doubleClickActionCookieName = \"na-map--double-click\";\n      /**\n       * Default DoubleClickAction setting\n       * @type {string}\n       * @private\n       */\n\n      this._doubleClickActionDefault = \"compass\";\n      /**\n       * Get DoubleClickAction setting from cookie or use default value\n       * @type {string}\n       * @private\n       */\n\n      this._doubleClickAction = this._getDoubleClickActionSetting();\n      /**\n       * showLayer cookie name\n       * @type {string}\n       * @private\n       */\n\n      this._showLayerCookieName = \"na-map--show-layer\";\n      /**\n       * Default showLayer setting\n       * @type {string}\n       * @private\n       */\n\n      this._showLayerDefault = \"grid\";\n      /**\n       * Get showLayer setting from cookie or use default value\n       * @type {string}\n       * @private\n       */\n\n      this._showLayer = this._getShowLayerSetting();\n\n      this._setupSvg();\n\n      this._setupListener();\n    }\n\n    var _proto = NAMap.prototype;\n\n    _proto._setupListener = function _setupListener() {\n      var _this = this;\n\n      function stopProp() {\n        if (d3.event.defaultPrevented) {\n          d3.event.stopPropagation();\n        }\n      }\n\n      this._svg.on(\"dblclick.zoom\", null).on(\"click\", stopProp, true).on(\"dblclick\", function (d, i, nodes) {\n        return _this._doDoubleClickAction(nodes[i]);\n      });\n\n      $(\"#reset\").on(\"click\", function () {\n        _this._clearMap();\n      });\n      $(\"#propertyDropdown\").on(\"click\", function () {\n        Object(_analytics__WEBPACK_IMPORTED_MODULE_22__[\"registerEvent\"])(\"Menu\", \"Select port on property\");\n      });\n      $(\"#settingsDropdown\").on(\"click\", function () {\n        Object(_analytics__WEBPACK_IMPORTED_MODULE_22__[\"registerEvent\"])(\"Menu\", \"Settings\");\n      });\n      $(\"#button-download-pb-calc\").on(\"click\", function () {\n        Object(_analytics__WEBPACK_IMPORTED_MODULE_22__[\"registerEvent\"])(\"Tools\", \"Download pb calculator\");\n      });\n      $(\"#doubleClick-action\").change(function () {\n        return _this._doubleClickSelected();\n      });\n      $(\"#show-layer\").change(function () {\n        return _this._showLayerSelected();\n      });\n      $(\"#about\").on(\"click\", function () {\n        _this._showAbout();\n      });\n    };\n\n    _proto._setupSvg = function _setupSvg() {\n      var _this2 = this;\n\n      // noinspection JSSuspiciousNameCombination\n      this._zoom = d3.zoom().scaleExtent([this.minScale, this._maxScale]).translateExtent([[this.coord.min - this.yGridBackgroundWidth * this.minScale, this.coord.min - this.xGridBackgroundHeight * this.minScale], [this.coord.max, this.coord.max]]).wheelDelta(function () {\n        return -_this2._wheelDelta * Math.sign(d3.event.deltaY);\n      }).on(\"zoom\", function () {\n        return _this2._naZoomed();\n      });\n      this._svg = d3.select(\"#na\").append(\"svg\").attr(\"id\", \"na-svg\").attr(\"width\", this._width).attr(\"height\", this._height).style(\"position\", \"absolute\").style(\"top\", this.margin.top + \"px\").style(\"left\", this.margin.left + \"px\").call(this._zoom);\n\n      this._svg.append(\"defs\");\n\n      this._g = this._svg.append(\"g\").classed(\"map\", true);\n    };\n    /**\n     * Get show setting from cookie or use default value\n     * @returns {string} - Show setting\n     * @private\n     */\n\n\n    _proto._getDoubleClickActionSetting = function _getDoubleClickActionSetting() {\n      var r = js_cookie__WEBPACK_IMPORTED_MODULE_3___default.a.get(this._doubleClickActionCookieName); // Use default value if cookie is not stored\n\n      r = typeof r !== \"undefined\" ? r : this._doubleClickActionDefault;\n      $(\"#doubleClick-action-\" + r).prop(\"checked\", true);\n      return r;\n    };\n    /**\n     * Store show setting in cookie\n     * @return {void}\n     * @private\n     */\n\n\n    _proto._storeDoubleClickActionSetting = function _storeDoubleClickActionSetting() {\n      if (this._doubleClickAction !== this._doubleClickActionDefault) {\n        js_cookie__WEBPACK_IMPORTED_MODULE_3___default.a.set(this._doubleClickActionCookieName, this._doubleClickAction);\n      } else {\n        js_cookie__WEBPACK_IMPORTED_MODULE_3___default.a.remove(this._doubleClickActionCookieName);\n      }\n    };\n\n    _proto._doubleClickSelected = function _doubleClickSelected() {\n      this._doubleClickAction = $(\"input[name='doubleClickAction']:checked\").val();\n\n      this._storeDoubleClickActionSetting();\n\n      this._clearMap();\n    };\n    /**\n     * Get show setting from cookie or use default value\n     * @returns {string} - Show setting\n     * @private\n     */\n\n\n    _proto._getShowLayerSetting = function _getShowLayerSetting() {\n      var r = js_cookie__WEBPACK_IMPORTED_MODULE_3___default.a.get(this._showLayerCookieName); // Use default value if cookie is not stored\n\n      r = typeof r !== \"undefined\" ? r : this._showLayerDefault;\n      $(\"#show-layer-\" + r).prop(\"checked\", true);\n      return r;\n    };\n    /**\n     * Store show setting in cookie\n     * @return {void}\n     * @private\n     */\n\n\n    _proto._storeShowLayerSetting = function _storeShowLayerSetting() {\n      if (this._showLayer !== this._showLayerDefault) {\n        js_cookie__WEBPACK_IMPORTED_MODULE_3___default.a.set(this._showLayerCookieName, this._showLayer);\n      } else {\n        js_cookie__WEBPACK_IMPORTED_MODULE_3___default.a.remove(this._showLayerCookieName);\n      }\n    };\n\n    _proto._showLayerSelected = function _showLayerSelected() {\n      this._showLayer = $(\"input[name='showLayer']:checked\").val();\n\n      this._storeShowLayerSetting();\n\n      this._refreshLayer();\n    };\n\n    _proto._refreshLayer = function _refreshLayer() {\n      var showGrid = this._showLayer === \"grid\",\n          showTeleport = this._showLayer === \"teleport\";\n      grid.show = showGrid;\n      grid.update();\n      teleport.show = showTeleport;\n      teleport.setData();\n      teleport.update();\n    };\n\n    _proto._displayMap = function _displayMap(transform) {\n      // Based on d3-tile v0.0.3\n      // https://github.com/d3/d3-tile/blob/0f8cc9f52564d4439845f651c5fab2fcc2fdef9e/src/tile.js\n      var log2tileSize = Math.log2(this._tileSize),\n          maxTileZoom = Math.log2(this.coord.max) - log2tileSize,\n          x0 = 0,\n          y0 = 0,\n          x1 = this._width,\n          y1 = this._height,\n          width = Math.floor(this.coord.max * transform.k < this._width ? this._width - 2 * transform.x : this.coord.max * transform.k),\n          height = Math.floor(this.coord.max * transform.k < this._height ? this._height - 2 * transform.y : this.coord.max * transform.k),\n          scale = Math.log2(transform.k);\n      var tileZoom = Math.min(maxTileZoom, Math.ceil(Math.log2(Math.max(width, height))) - log2tileSize),\n          p = Math.round(tileZoom * 10 - scale * 10 - maxTileZoom * 10) / 10,\n          k = Math.pow(this._wheelDelta, p);\n      var x = transform.x,\n          y = transform.y,\n          dx = this.coord.max * transform.k < this._width ? transform.x : 0,\n          dy = this.coord.max * transform.k < this._height ? transform.y : 0,\n          cols = d3.range(Math.max(0, Math.floor((x0 - x) / this._tileSize / k)), Math.max(0, Math.min(Math.ceil((x1 - x - dx) / this._tileSize / k), Math.pow(2, tileZoom)))),\n          rows = d3.range(Math.max(0, Math.floor((y0 - y) / this._tileSize / k)), Math.max(0, Math.min(Math.ceil((y1 - y - dy) / this._tileSize / k), Math.pow(2, tileZoom)))),\n          tiles = [];\n      rows.forEach(function (row) {\n        cols.forEach(function (col) {\n          tiles.push([col, row, tileZoom]);\n        });\n      });\n      tiles.translate = [x, y];\n      tiles.scale = k;\n\n      this._updateMap(tiles);\n    };\n\n    _proto._updateMap = function _updateMap(tiles) {\n      var _this3 = this;\n\n      // noinspection JSSuspiciousNameCombination\n      var tileTransform = d3.zoomIdentity.translate(Math.round(tiles.translate[0]), Math.round(tiles.translate[1])).scale(Math.round(tiles.scale * 1000) / 1000);\n\n      var image = this._g.attr(\"transform\", tileTransform).selectAll(\"image\").data(tiles, function (d) {\n        return d;\n      });\n\n      image.exit().remove();\n      image.enter().append(\"image\").attr(\"xlink:href\", function (d) {\n        return \"images/map/\" + d[2] + \"/\" + d[1] + \"/\" + d[0] + \".jpg\";\n      }).attr(\"x\", function (d) {\n        return d[0] * _this3._tileSize;\n      }).attr(\"y\", function (d) {\n        return d[1] * _this3._tileSize;\n      }).attr(\"width\", this._tileSize).attr(\"height\", this._tileSize);\n    };\n\n    _proto._clearMap = function _clearMap() {\n      windPrediction.clearMap();\n      course.clearMap();\n      f11.clearMap();\n      ports.clearMap();\n      portSelect.clearMap();\n      $(\".selectpicker\").val(\"default\").selectpicker(\"refresh\");\n    };\n\n    _proto._showAbout = function _showAbout() {\n      $(\"#modal-about\").modal(\"show\");\n    };\n\n    _proto._doDoubleClickAction = function _doDoubleClickAction(self) {\n      var coord = d3.mouse(self),\n          transform = d3.zoomTransform(self);\n      var mx = coord[0],\n          my = coord[1],\n          tk = transform.k,\n          tx = transform.x,\n          ty = transform.y;\n      var x = (mx - tx) / tk,\n          y = (my - ty) / tk;\n\n      if (this._doubleClickAction === \"f11\") {\n        f11.printCoord(x, y);\n      } else {\n        course.plotCourse(x, y);\n      }\n\n      this.zoomAndPan(x, y, 1);\n    };\n\n    _proto._setZoomLevel = function _setZoomLevel(zoomLevel) {\n      this._zoomLevel = zoomLevel;\n      ports.zoomLevel = zoomLevel;\n      grid.zoomLevel = zoomLevel;\n      teleport.zoomLevel = zoomLevel;\n    };\n\n    _proto._updateCurrent = function _updateCurrent() {\n      pbZone.refresh();\n      grid.update();\n      teleport.setData();\n      teleport.update();\n      ports.update(this.currentScale);\n    };\n\n    _proto._setZoomLevelAndData = function _setZoomLevelAndData() {\n      if (d3.event.transform.k !== this.currentScale) {\n        this.currentScale = d3.event.transform.k;\n\n        if (this.currentScale > this._PBZoneZoomThreshold) {\n          if (this._zoomLevel !== \"pbZone\") {\n            this._setZoomLevel(\"pbZone\");\n          }\n        } else if (this.currentScale > this._labelZoomThreshold) {\n          if (this._zoomLevel !== \"portLabel\") {\n            this._setZoomLevel(\"portLabel\");\n          }\n        } else if (this._zoomLevel !== \"initial\") {\n          this._setZoomLevel(\"initial\");\n        }\n\n        this._updateCurrent();\n      }\n    };\n    /**\n     * Zoom svg groups\n     * @return {void}\n     * @private\n     */\n\n\n    _proto._naZoomed = function _naZoomed() {\n      this._setZoomLevelAndData();\n      /**\n       * D3 transform ({@link https://github.com/d3/d3-zoom/blob/master/src/transform.js})\n       * @external Transform\n       * @property {number} x - X Coordinate\n       * @property {number} y - Y Coordinate\n       * @property {number} k - Scale factor\n       */\n\n      /**\n       * Current transform\n       * @type {Transform}\n       */\n\n\n      var zoomTransform = d3.zoomIdentity.translate(Math.round(d3.event.transform.x), Math.round(d3.event.transform.y)).scale(Object(_util__WEBPACK_IMPORTED_MODULE_7__[\"roundToThousands\"])(d3.event.transform.k));\n\n      this._displayMap(zoomTransform);\n\n      grid.transform(zoomTransform);\n      ports.transform(zoomTransform);\n      teleport.transform(zoomTransform);\n      course.transform(zoomTransform);\n      pbZone.transform(zoomTransform);\n      f11.transform(zoomTransform);\n    };\n\n    _proto._initialZoomAndPan = function _initialZoomAndPan() {\n      this._svg.call(this._zoom.scaleTo, this.minScale);\n    };\n\n    _proto.init = function init() {\n      this._setZoomLevel(\"initial\");\n\n      this._initialZoomAndPan();\n\n      this._refreshLayer();\n    };\n\n    _proto.zoomAndPan = function zoomAndPan(x, y, scale) {\n      var transform = d3.zoomIdentity.scale(scale).translate(Math.round(-x + this._width / 2 / scale), Math.round(-y + this._height / 2 / scale));\n\n      this._svg.call(this._zoom.transform, transform);\n    };\n\n    _proto.goToPort = function goToPort() {\n      if (ports.currentPort.id !== \"0\") {\n        this.zoomAndPan(ports.currentPort.coord.x, ports.currentPort.coord.y, 2);\n      } else {\n        this.initialZoomAndPan();\n      }\n    };\n\n    return NAMap;\n  }();\n\n  function setup() {\n    // Set cookies defaults (expiry 365 days)\n    js_cookie__WEBPACK_IMPORTED_MODULE_3___default.a.defaults = {\n      expires: 365\n    };\n    moment__WEBPACK_IMPORTED_MODULE_1___default.a.locale(\"en-gb\");\n    map.init();\n    ports.clearMap(map.minScale);\n  }\n\n  function init(data) {\n    // Port ids of capturable ports\n    var portIds = [];\n\n    function getFeature(object) {\n      return object.filter(function (port) {\n        return portIds.includes(port.id);\n      }).map(function (d) {\n        return {\n          type: \"Feature\",\n          id: d.id,\n          geometry: d.geometry\n        };\n      });\n    }\n\n    map = new NAMap();\n    var portData = Object(topojson_client__WEBPACK_IMPORTED_MODULE_0__[\"feature\"])(data.ports, data.ports.objects.ports);\n    ports = new _port__WEBPACK_IMPORTED_MODULE_12__[\"default\"](portData.features, data.pb, serverName, map.margin.top, map.margin.right, map.minScale); // Port ids of capturable ports\n\n    portIds = portData.features.filter(function (port) {\n      return !port.properties.nonCapturable;\n    }).map(function (port) {\n      return port.id;\n    });\n    var pbCircles = Object(topojson_client__WEBPACK_IMPORTED_MODULE_0__[\"feature\"])(data.pbZones, data.pbZones.objects.pbCircles);\n    pbCircles = getFeature(pbCircles.features);\n    var forts = Object(topojson_client__WEBPACK_IMPORTED_MODULE_0__[\"feature\"])(data.pbZones, data.pbZones.objects.forts);\n    forts = getFeature(forts.features);\n    var towers = Object(topojson_client__WEBPACK_IMPORTED_MODULE_0__[\"feature\"])(data.pbZones, data.pbZones.objects.towers);\n    towers = getFeature(towers.features);\n    var joinCircles = Object(topojson_client__WEBPACK_IMPORTED_MODULE_0__[\"feature\"])(data.pbZones, data.pbZones.objects.joinCircles);\n    joinCircles = getFeature(joinCircles.features);\n    pbZone = new _pbzone__WEBPACK_IMPORTED_MODULE_11__[\"default\"](pbCircles, forts, towers, joinCircles, ports);\n    var shipData = JSON.parse(JSON.stringify(data.ships.shipData));\n    shipCompare = new _ship_compare__WEBPACK_IMPORTED_MODULE_14__[\"default\"](shipData);\n    var woodData = JSON.parse(JSON.stringify(data.woods));\n    woodCompare = new _wood_compare__WEBPACK_IMPORTED_MODULE_17__[\"default\"](woodData);\n    var moduleData = JSON.parse(JSON.stringify(data.modules));\n    moduleList = new _module_list__WEBPACK_IMPORTED_MODULE_18__[\"default\"](moduleData);\n    var recipeData = JSON.parse(JSON.stringify(data.recipes.recipe));\n    recipeList = new _recipe_list__WEBPACK_IMPORTED_MODULE_19__[\"default\"](recipeData, moduleData);\n    var ingredientData = JSON.parse(JSON.stringify(data.recipes.ingredient));\n    ingredientList = new _ingredient_list__WEBPACK_IMPORTED_MODULE_20__[\"default\"](ingredientData, moduleData);\n    var buildingData = JSON.parse(JSON.stringify(data.buildings));\n    buildingList = new _building_list__WEBPACK_IMPORTED_MODULE_21__[\"default\"](buildingData);\n    teleport = new _teleport__WEBPACK_IMPORTED_MODULE_15__[\"default\"](map.coord.min, map.coord.max, ports);\n    portSelect = new _port_select__WEBPACK_IMPORTED_MODULE_13__[\"default\"](map, ports, pbZone);\n    windPrediction = new _wind_prediction__WEBPACK_IMPORTED_MODULE_16__[\"default\"](map.margin.left, map.margin.top);\n    f11 = new _f11__WEBPACK_IMPORTED_MODULE_9__[\"default\"](map);\n    grid = new _grid__WEBPACK_IMPORTED_MODULE_10__[\"default\"](map);\n    course = new _course__WEBPACK_IMPORTED_MODULE_8__[\"default\"](map.rem);\n    setup();\n  }\n\n  function readData(cacheMode) {\n    var naMapJsonData = fetch(serverName + \".json\", {\n      cache: cacheMode\n    }).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"checkFetchStatus\"]).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"getJsonFromFetch\"]);\n    var pbJsonData = fetch(serverName + \"-pb.json\", {\n      cache: cacheMode\n    }).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"checkFetchStatus\"]).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"getJsonFromFetch\"]);\n    var pbZonesJsonData = fetch(\"pb.json\", {\n      cache: cacheMode\n    }).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"checkFetchStatus\"]).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"getJsonFromFetch\"]);\n    var shipJsonData = fetch(\"ships.json\", {\n      cache: cacheMode\n    }).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"checkFetchStatus\"]).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"getJsonFromFetch\"]);\n    var woodJsonData = fetch(\"woods.json\", {\n      cache: cacheMode\n    }).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"checkFetchStatus\"]).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"getJsonFromFetch\"]);\n    var moduleJsonData = fetch(\"modules.json\", {\n      cache: cacheMode\n    }).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"checkFetchStatus\"]).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"getJsonFromFetch\"]);\n    var recipeJsonData = fetch(\"recipes.json\", {\n      cache: cacheMode\n    }).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"checkFetchStatus\"]).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"getJsonFromFetch\"]);\n    var buildingJsonData = fetch(\"buildings.json\", {\n      cache: cacheMode\n    }).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"checkFetchStatus\"]).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"getJsonFromFetch\"]);\n    Promise.all([naMapJsonData, pbJsonData, pbZonesJsonData, shipJsonData, woodJsonData, moduleJsonData, recipeJsonData, buildingJsonData]).then(function (values) {\n      return init({\n        ports: values[0],\n        pb: values[1],\n        pbZones: values[2],\n        ships: values[3],\n        woods: values[4],\n        modules: values[5],\n        recipes: values[6],\n        buildings: values[7]\n      });\n    }).catch(_util__WEBPACK_IMPORTED_MODULE_7__[\"putFetchError\"]);\n  }\n\n  var cacheMode = \"default\";\n  var lastUpdateData = fetch(\"update.txt\", {\n    cache: \"reload\"\n  }).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"checkFetchStatus\"]).then(_util__WEBPACK_IMPORTED_MODULE_7__[\"getTextFromFetch\"]);\n  Promise.all([lastUpdateData]).then(function (values) {\n    var serverDayStart = moment__WEBPACK_IMPORTED_MODULE_1___default()().utc().hour(11).minute(0);\n\n    if (serverDayStart.isAfter(moment__WEBPACK_IMPORTED_MODULE_1___default()().utc())) {\n      serverDayStart = serverDayStart.subtract(1, \"day\");\n    }\n\n    var lastUpdate = moment__WEBPACK_IMPORTED_MODULE_1___default()(values[0], \"YYYY-MM-DD H.mm\");\n    /*\n    console.log(\n        \"serverDayStart\",\n        serverDayStart.format(\"dddd D MMMM H.mm\"),\n        \"lastUpdate\",\n        lastUpdate.format(\"dddd D MMMM H.mm\"),\n        \"lastUpdate.isBefore(serverDayStart)\",\n        lastUpdate.isBefore(serverDayStart, \"hour\")\n    );\n    */\n\n    if (lastUpdate.isBefore(serverDayStart, \"hour\")) {\n      cacheMode = \"reload\";\n    }\n  }).catch(_util__WEBPACK_IMPORTED_MODULE_7__[\"putFetchError\"]);\n  readData(cacheMode);\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/na-display.js\n");

/***/ })

})